
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

<<<<<<< HEAD
_lr_signature = 'leftORleftANDrightEXMARKleftGTLTGELENESAMEleftPLUSMINUSleftTIMESDIVIDEMODULOleftPOWEREQUALS PLUS MINUS TIMES DIVIDE POWER MODULO LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK NEWLINE COMMA ID SEMI COLON RQUOTE LQUOTE LT LE GT GE NE EXMARK DECIMAL_CONS INTEGER_CONS STRING_CONS FRACTION_CONS DIF COMMENT SAME TRUE PRINT DECIMAL OR RETURN BOOLEAN STRING ELSE FOR INTEGER WHILE FALSE IF AND DO FRACTION PROGRAM FUNCTION NOT VOID VARprogram : PROGRAM ID SEMI program1\n    | PROGRAM ID SEMI var program1program1 : function program1\n    | functionfunction : type FUNCTION ID pushid LPAREN parameter RPAREN savefunc block\n    | type FUNCTION ID pushid LPAREN RPAREN savefunc blocksavefunc : emptyparameter : type ID pushid\n    | type ID pushid COMMA parameterblock : LBRACE statements RETURN expression SEMI savereturn RBRACE\n    | LBRACE RETURN expression SEMI savereturn RBRACE\n    | LBRACE statements nortn RBRACE\n    | LBRACE nortn RBRACE\n    blocknortn : LBRACE statements RBRACE\n    | LBRACE RBRACEnortn : emptysavereturn : emptystatements : statement\n    | statement statements\n    statement : condition\n    | assignment \n    | while\n    | for\n    | dowhile\n    | comment\n    | print\n    | var\n    | funcallprint : PRINT LPAREN expression RPAREN SEMI\n    | PRINT LPAREN STRING_CONS RPAREN SEMI\n    | PRINT LPAREN ID RPAREN SEMIfuncall : ID pushid LPAREN startcount expression exparam RPAREN assignvalues SEMI\n    | ID pushid RPAREN LPAREN assignvalues SEMIstartcount : emptyexparam : COMMA expression exparam\n    | COMMA expressionassignvalues : emptycomment : COMMENT IDfor : LPAREN assignment expression SEMI expression RPAREN blocknortndowhile : DO pushjump blocknortn WHILE LPAREN expression RPAREN gototpushjump : emptygotot : emptywhile : WHILE pushjump LPAREN expression RPAREN gotof blocknortn gotowhilegotowhile : emptycondition : IF LPAREN expression RPAREN gotof blocknortn ELSE gotoif blocknortn updatejump\n    | IF LPAREN expression RPAREN gotof blocknortn updatejumpgotoif : emptygotof : emptyupdatejump : emptyvar : VAR type var1 SEMIvar1 : ID pushid savevar allocatevar\n    | ID pushid savevar allocatevar COMMA var1\n    | ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevar COMMA var1\n    | ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevarsettypeint : emptysettypedec : emptysettypefrac : emptysettypestring : emptysettypebool : emptysettypevoid : emptysavevar : emptyallocatevar : emptyupdatesize : emptytype : BOOLEAN settypebool\n    | INTEGER settypeint\n    | DECIMAL settypedec\n    | STRING settypestring\n    | FRACTION settypefrac\n    | VOID settypevoidassignment : ID pushid EQUALS expression SEMI updatevar\n    | ID pushid LBRACK expression RBRACK EQUALS expression SEMI updatecellupdatecell : emptyupdatevar : emptyexpression : exp\n    exp : exp OR exp\n    | exp AND exp\n    | exp SAME exp\n    | exp DIF exp\n    | exp GE exp\n    | exp LE exp\n    | exp NE exp\n    | exp GT exp\n    | exp LT exp\n    | exp PLUS exp\n    | exp MINUS exp\n    | exp MODULO exp\n    | exp DIVIDE exp\n    | exp TIMES exp\n    | exp POWER expexp : ID pushdeclaredid\n    | ID LBRACK expression RBRACK pushdeclaredid\n    | LBRACK exp RBRACK\n    | INTEGER_CONS settypeint pushcons\n    | STRING_CONS settypestring pushcons \n    | FRACTION_CONS settypefrac pushcons \n    | DECIMAL_CONS settypedec pushcons \n    | TRUE settypebool pushcons\n    | FALSE settypebool pushconsexp : EXMARK expexp : LPAREN exp RPARENpushtype : emptypushid : pushtypepushdeclaredid : pushtypepushcons : pushtypeempty :'
    
_lr_action_items = {'MINUS':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,125,-105,-105,-105,125,-105,-105,-105,-105,125,125,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,125,125,-87,-85,125,125,-84,125,125,125,-86,-89,125,-88,125,-93,-97,-105,-91,]),'DECIMAL':([4,7,14,15,39,40,57,62,63,87,142,202,219,],[5,5,5,5,-50,5,-6,-5,5,-13,-12,-11,-10,]),'AND':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,131,-105,-105,-105,131,-105,-105,-105,-105,-99,131,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,131,-80,-87,-85,-79,-83,-84,-77,-81,-76,-86,-89,131,-88,-82,-93,-97,-105,-91,]),'LT':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,127,-105,-105,-105,127,-105,-105,-105,-105,127,127,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,127,-80,-87,-85,-79,-83,-84,-77,-81,127,-86,-89,127,-88,-82,-93,-97,-105,-91,]),'RBRACE':([39,58,64,65,68,69,70,71,72,73,75,76,78,79,80,101,103,106,120,148,164,165,185,189,190,204,208,209,210,211,213,217,224,225,226,229,231,232,233,234,240,241,242,243,244,247,248,249,250,251,],[-50,-105,-25,87,-21,-105,-16,-18,-26,-23,-27,-22,-28,-20,-24,142,-19,-38,-105,190,-17,202,-105,208,-15,219,-14,-30,-29,-31,-105,-105,-73,-70,-33,-49,-46,-39,-105,-105,-43,-44,-42,-40,-105,-105,-72,-71,-32,-45,]),'TIMES':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,135,-105,-105,-105,135,-105,-105,-105,-105,135,135,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,135,135,-87,135,135,135,135,135,135,135,-86,-89,135,-88,135,-93,-97,-105,-91,]),'SEMI':([3,16,19,22,24,25,33,34,35,36,38,41,42,46,48,61,85,90,91,92,93,95,97,98,99,100,112,115,116,117,118,119,137,138,139,140,143,145,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,191,192,193,195,196,199,203,214,215,218,235,237,246,],[4,-56,-57,-55,-58,-59,-105,39,-101,-102,-105,-61,-105,-62,-51,-52,-105,-105,-105,-105,-105,120,-74,-105,-105,-105,-54,-105,-105,-105,-105,-99,-105,-105,-90,-103,185,186,-100,-95,-104,-98,-96,-94,-92,-75,-80,-87,-85,-79,-83,-84,-77,-81,-76,-86,-89,-78,-88,-82,-93,-97,209,210,211,213,-105,-53,-105,-37,226,-91,244,-105,250,]),'STRING_CONS':([67,88,89,94,96,102,105,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,146,152,153,155,186,197,198,207,213,223,224,225,227,244,248,249,],[93,93,93,93,93,93,93,149,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-105,93,-34,93,93,-105,93,-73,-70,93,-105,-72,-71,]),'DIF':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,134,-105,-105,-105,134,-105,-105,-105,-105,-99,134,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,-75,-80,-87,-85,-79,-83,-84,-77,-81,-76,-86,-89,134,-88,-82,-93,-97,-105,-91,]),'IF':([39,58,64,68,71,72,73,75,76,78,79,80,106,148,190,208,209,210,211,213,217,224,225,226,229,231,232,233,234,240,241,242,243,244,247,248,249,250,251,],[-50,66,-25,-21,66,-26,-23,-27,-22,-28,-20,-24,-38,66,-15,-14,-30,-29,-31,-105,-105,-73,-70,-33,-49,-46,-39,-105,-105,-43,-44,-42,-40,-105,-105,-72,-71,-32,-45,]),'RETURN':([39,58,64,68,69,71,72,73,75,76,78,79,80,103,106,190,208,209,210,211,213,217,224,225,226,229,231,232,233,234,240,241,242,243,244,247,248,249,250,251,],[-50,67,-25,-21,102,-18,-26,-23,-27,-22,-28,-20,-24,-19,-38,-15,-14,-30,-29,-31,-105,-105,-73,-70,-33,-49,-46,-39,-105,-105,-43,-44,-42,-40,-105,-105,-72,-71,-32,-45,]),'COMMA':([16,19,22,24,25,33,35,36,38,41,42,46,48,50,56,85,90,91,92,93,97,98,99,100,112,115,116,117,118,119,137,138,139,140,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,216,218,236,],[-56,-57,-55,-58,-59,-105,-101,-102,-105,-61,-105,-62,54,-105,63,-105,-105,-105,-105,-105,-74,-105,-105,-105,156,-105,-105,-105,-105,-99,-105,-105,-90,-103,-100,-95,-104,-98,-96,-94,-92,-75,-80,-87,-85,-79,-83,-84,-77,-81,-76,-86,-89,-78,-88,-82,-93,-97,-105,227,-91,227,]),'POWER':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,133,-105,-105,-105,133,-105,-105,-105,-105,133,133,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,133,133,133,133,133,133,133,133,133,133,133,-89,133,133,133,-93,-97,-105,-91,]),'STRING':([4,7,14,15,39,40,57,62,63,87,142,202,219,],[9,9,9,9,-50,9,-6,-5,9,-13,-12,-11,-10,]),'PRINT':([39,58,64,68,71,72,73,75,76,78,79,80,106,148,190,208,209,210,211,213,217,224,225,226,229,231,232,233,234,240,241,242,243,244,247,248,249,250,251,],[-50,83,-25,-21,83,-26,-23,-27,-22,-28,-20,-24,-38,83,-15,-14,-30,-29,-31,-105,-105,-73,-70,-33,-49,-46,-39,-105,-105,-43,-44,-42,-40,-105,-105,-72,-71,-32,-45,]),'LBRACK':([33,35,36,38,41,42,67,84,88,89,94,96,100,102,104,105,110,111,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,146,151,152,153,155,186,197,198,207,213,223,224,225,227,244,248,249,],[-105,-101,-102,-105,-61,47,96,-105,96,96,96,96,141,96,-105,96,96,152,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,152,96,141,96,96,-105,96,-34,96,96,-105,96,-73,-70,96,-105,-72,-71,]),'GE':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,126,-105,-105,-105,126,-105,-105,-105,-105,126,126,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,126,-80,-87,-85,-79,-83,-84,-77,-81,126,-86,-89,126,-88,-82,-93,-97,-105,-91,]),'FALSE':([67,88,89,94,96,102,105,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,146,152,153,155,186,197,198,207,213,223,224,225,227,244,248,249,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-105,91,-34,91,91,-105,91,-73,-70,91,-105,-72,-71,]),'FRACTION_CONS':([67,88,89,94,96,102,105,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,146,152,153,155,186,197,198,207,213,223,224,225,227,244,248,249,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-105,90,-34,90,90,-105,90,-73,-70,90,-105,-72,-71,]),'GT':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,136,-105,-105,-105,136,-105,-105,-105,-105,136,136,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,136,-80,-87,-85,-79,-83,-84,-77,-81,136,-86,-89,136,-88,-82,-93,-97,-105,-91,]),'RBRACK':([16,19,22,24,25,35,53,59,60,90,91,92,93,97,98,99,100,115,116,117,118,119,121,137,138,139,140,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,194,203,218,],[-56,-57,-55,-58,-59,-101,-105,85,-63,-105,-105,-105,-105,-74,-105,-105,-105,-105,-105,-105,-105,-99,166,-105,-105,-90,-103,-100,-95,-104,-98,-96,-94,-92,-75,-80,-87,-85,-79,-83,-84,-77,-81,-76,-86,-89,-78,-88,-82,-93,-97,203,212,-105,-91,]),'$end':([2,7,13,20,31,57,62,87,142,202,219,],[0,-4,-1,-3,-2,-6,-5,-13,-12,-11,-10,]),'LPAREN':([32,35,36,37,39,58,64,66,67,68,71,72,73,75,76,78,79,80,81,83,84,88,89,94,96,102,105,106,107,108,110,111,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,146,148,152,153,154,155,186,188,190,197,198,207,208,209,210,211,213,217,223,224,225,226,227,229,231,232,233,234,240,241,242,243,244,247,248,249,250,251,],[-105,-101,-102,40,-50,74,-25,88,89,-21,74,-26,-23,-27,-22,-28,-20,-24,-105,110,-105,89,89,89,89,89,89,-38,146,-41,89,155,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,74,89,89,196,-105,89,207,-15,-34,89,89,-14,-30,-29,-31,-105,-105,89,-73,-70,-33,89,-49,-46,-39,-105,-105,-43,-44,-42,-40,-105,-105,-72,-71,-32,-45,]),'VAR':([4,39,58,64,68,71,72,73,75,76,78,79,80,106,148,190,208,209,210,211,213,217,224,225,226,229,231,232,233,234,240,241,242,243,244,247,248,249,250,251,],[14,-50,14,-25,-21,14,-26,-23,-27,-22,-28,-20,-24,-38,14,-15,-14,-30,-29,-31,-105,-105,-73,-70,-33,-49,-46,-39,-105,-105,-43,-44,-42,-40,-105,-105,-72,-71,-32,-45,]),'OR':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,122,-105,-105,-105,122,-105,-105,-105,-105,-99,122,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,-75,-80,-87,-85,-79,-83,-84,-77,-81,-76,-86,-89,122,-88,-82,-93,-97,-105,-91,]),'FUNCTION':([5,6,8,9,10,11,12,16,17,18,19,21,22,23,24,25,26,28,29,],[-105,-105,-105,-105,-105,27,-105,-56,-66,-68,-57,-65,-55,-67,-58,-59,-64,-69,-60,]),'COMMENT':([39,58,64,68,71,72,73,75,76,78,79,80,106,148,190,208,209,210,211,213,217,224,225,226,229,231,232,233,234,240,241,242,243,244,247,248,249,250,251,],[-50,77,-25,-21,77,-26,-23,-27,-22,-28,-20,-24,-38,77,-15,-14,-30,-29,-31,-105,-105,-73,-70,-33,-49,-46,-39,-105,-105,-43,-44,-42,-40,-105,-105,-72,-71,-32,-45,]),'LE':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,123,-105,-105,-105,123,-105,-105,-105,-105,123,123,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,123,-80,-87,-85,-79,-83,-84,-77,-81,123,-86,-89,123,-88,-82,-93,-97,-105,-91,]),'FRACTION':([4,7,14,15,39,40,57,62,63,87,142,202,219,],[6,6,6,6,-50,6,-6,-5,6,-13,-12,-11,-10,]),'DECIMAL_CONS':([67,88,89,94,96,102,105,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,146,152,153,155,186,197,198,207,213,223,224,225,227,244,248,249,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-105,92,-34,92,92,-105,92,-73,-70,92,-105,-72,-71,]),'SAME':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,129,-105,-105,-105,129,-105,-105,-105,-105,129,129,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,129,-80,-87,-85,-79,-83,-84,-77,-81,129,-86,-89,129,-88,-82,-93,-97,-105,-91,]),'MODULO':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,132,-105,-105,-105,132,-105,-105,-105,-105,132,132,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,132,132,-87,132,132,132,132,132,132,132,-86,-89,132,-88,132,-93,-97,-105,-91,]),'ELSE':([190,208,217,],[-15,-14,230,]),'WHILE':([39,58,64,68,71,72,73,75,76,78,79,80,106,147,148,190,208,209,210,211,213,217,224,225,226,229,231,232,233,234,240,241,242,243,244,247,248,249,250,251,],[-50,81,-25,-21,81,-26,-23,-27,-22,-28,-20,-24,-38,188,81,-15,-14,-30,-29,-31,-105,-105,-73,-70,-33,-49,-46,-39,-105,-105,-43,-44,-42,-40,-105,-105,-72,-71,-32,-45,]),'INTEGER':([4,7,14,15,39,40,57,62,63,87,142,202,219,],[8,8,8,8,-50,8,-6,-5,8,-13,-12,-11,-10,]),'DO':([39,58,64,68,71,72,73,75,76,78,79,80,106,148,190,208,209,210,211,213,217,224,225,226,229,231,232,233,234,240,241,242,243,244,247,248,249,250,251,],[-50,82,-25,-21,82,-26,-23,-27,-22,-28,-20,-24,-38,82,-15,-14,-30,-29,-31,-105,-105,-73,-70,-33,-49,-46,-39,-105,-105,-43,-44,-42,-40,-105,-105,-72,-71,-32,-45,]),'DIVIDE':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,124,-105,-105,-105,124,-105,-105,-105,-105,124,124,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,124,124,-87,124,124,124,124,124,124,124,-86,-89,124,-88,124,-93,-97,-105,-91,]),'EQUALS':([35,36,84,104,111,144,212,],[-101,-102,-105,-105,153,153,223,]),'BOOLEAN':([4,7,14,15,39,40,57,62,63,87,142,202,219,],[10,10,10,10,-50,10,-6,-5,10,-13,-12,-11,-10,]),'PLUS':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,128,-105,-105,-105,128,-105,-105,-105,-105,128,128,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,128,128,-87,-85,128,128,-84,128,128,128,-86,-89,128,-88,128,-93,-97,-105,-91,]),'NE':([16,19,22,24,25,35,90,91,92,93,97,98,99,100,114,115,116,117,118,119,121,137,138,139,140,149,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,203,218,],[-56,-57,-55,-58,-59,-101,-105,-105,-105,-105,130,-105,-105,-105,130,-105,-105,-105,-105,130,130,-105,-105,-90,-103,-105,-105,-100,-95,-104,-98,-96,-94,-92,130,-80,-87,-85,-79,-83,-84,-77,-81,130,-86,-89,130,-88,-82,-93,-97,-105,-91,]),'LBRACE':([45,49,51,52,55,82,108,109,157,200,201,206,220,221,230,238,239,],[-105,-105,58,-7,58,-105,-41,148,-105,-48,148,-105,148,148,-105,-47,148,]),'EXMARK':([67,88,89,94,96,102,105,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,146,152,153,155,186,197,198,207,213,223,224,225,227,244,248,249,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-105,94,-34,94,94,-105,94,-73,-70,94,-105,-72,-71,]),'PROGRAM':([0,],[1,]),'INTEGER_CONS':([47,67,88,89,94,96,102,105,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,146,152,153,155,186,197,198,207,213,223,224,225,227,244,248,249,],[53,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-105,98,-34,98,98,-105,98,-73,-70,98,-105,-72,-71,]),'RPAREN':([16,19,22,24,25,35,36,40,43,50,56,84,86,90,91,92,93,97,98,99,100,111,113,114,115,116,117,118,119,137,138,139,140,149,150,151,158,159,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,187,203,205,218,222,228,236,245,],[-56,-57,-55,-58,-59,-101,-102,45,49,-105,-8,-105,-9,-105,-105,-105,-105,-74,-105,-105,-105,154,157,158,-105,-105,-105,-105,-99,-105,-105,-90,-103,191,192,193,-100,-95,-104,-98,-96,-94,-92,-75,-80,-87,-85,-79,-83,-84,-77,-81,-76,-86,-89,-78,-88,-82,-93,-97,206,-105,220,-91,234,237,-36,-35,]),'TRUE':([67,88,89,94,96,102,105,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,146,152,153,155,186,197,198,207,213,223,224,225,227,244,248,249,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-105,99,-34,99,99,-105,99,-73,-70,99,-105,-72,-71,]),'VOID':([4,7,14,15,39,40,57,62,63,87,142,202,219,],[12,12,12,12,-50,12,-6,-5,12,-13,-12,-11,-10,]),'ID':([1,5,6,8,9,10,12,16,17,18,19,21,22,23,24,25,26,27,28,29,30,39,44,54,58,64,67,68,71,72,73,74,75,76,77,78,79,80,88,89,94,96,102,105,106,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,146,148,152,153,155,156,186,190,197,198,207,208,209,210,211,213,217,223,224,225,226,227,229,231,232,233,234,240,241,242,243,244,247,248,249,250,251,],[3,-105,-105,-105,-105,-105,-105,-56,-66,-68,-57,-65,-55,-67,-58,-59,-64,32,-69,-60,33,-50,50,33,84,-25,100,-21,84,-26,-23,104,-27,-22,106,-28,-20,-24,100,100,100,100,100,100,-38,151,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,84,100,100,-105,33,100,-15,-34,100,100,-14,-30,-29,-31,-105,-105,100,-73,-70,-33,100,-49,-46,-39,-105,-105,-43,-44,-42,-40,-105,-105,-72,-71,-32,-45,]),}
=======
_lr_signature = 'leftORleftANDrightEXMARKleftGTLTGELENESAMEleftPLUSMINUSleftTIMESDIVIDEMODULOleftPOWEREQUALS PLUS MINUS TIMES DIVIDE POWER MODULO LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK NEWLINE COMMA ID SEMI COLON RQUOTE LQUOTE LT LE GT GE NE EXMARK DECIMAL_CONS INTEGER_CONS STRING_CONS FRACTION_CONS DIF COMMENT SAME FUNCTION AND NOT STRING FRACTION DO INTEGER VOID FOR ELSE PRINT WHILE PROGRAM BOOLEAN VAR RETURN FALSE DECIMAL TRUE OR IFprogram : PROGRAM ID SEMI program1\n    | PROGRAM ID SEMI var program1program1 : function program1\n    | functionfunction : type FUNCTION ID pushid LPAREN parameter RPAREN savefunc block\n    | type FUNCTION ID pushid LPAREN RPAREN savefunc blocksavefunc : emptyparameter : type ID pushid\n    | type ID pushid COMMA parameterblock : LBRACE statements RBRACE\n    | LBRACE RBRACEstatements : statement\n    | statement statements\n    statement : condition\n    | assignment \n    | while\n    | for\n    | dowhile\n    | print\n    | var\n    | funcallprint : PRINT LPAREN expression RPAREN SEMI\n    | PRINT LPAREN STRING_CONS RPAREN SEMI\n    | PRINT LPAREN ID RPAREN SEMIfuncall : ID LPAREN RPAREN\n    | ID RPAREN LPARENfor : LPAREN assignment expression SEMI expression RPAREN blockdowhile : DO pushjump block WHILE LPAREN expression RPAREN gototpushjump : emptygotot : emptywhile : WHILE pushjump LPAREN expression RPAREN gotof block gotowhilegotowhile : emptycondition : IF LPAREN expression RPAREN gotof block ELSE gotoif block updatejump\n    | IF LPAREN expression RPAREN gotof block updatejumpgotoif : emptygotof : emptyupdatejump : emptyvar : VAR type var1 SEMIvar1 : ID pushid savevar allocatevar\n    | ID pushid savevar allocatevar COMMA var1\n    | ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevar COMMA var1\n    | ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevarsettypeint : emptysettypedec : emptysettypefrac : emptysettypestring : emptysettypebool : emptysettypevoid : emptysavevar : emptyallocatevar : emptyupdatesize : emptytype : BOOLEAN settypebool\n    | INTEGER settypeint\n    | DECIMAL settypedec\n    | STRING settypestring\n    | FRACTION settypefrac\n    | VOID settypevoidassignment : ID pushid EQUALS expression SEMI updatevar\n    | ID pushid LBRACK expression RBRACK EQUALS expression SEMI updatecellupdatecell : emptyupdatevar : emptyexpression : exp\n    exp : exp OR exp\n    | exp AND exp\n    | exp SAME exp\n    | exp DIF exp\n    | exp GE exp\n    | exp LE exp\n    | exp NE exp\n    | exp GT exp\n    | exp LT exp\n    | exp PLUS exp\n    | exp MINUS exp\n    | exp MODULO exp\n    | exp DIVIDE exp\n    | exp TIMES exp\n    | exp POWER expexp : ID pushdeclaredid\n    | ID LBRACK expression RBRACK pushdeclaredid\n    | LBRACK exp RBRACK\n    | INTEGER_CONS settypeint pushcons\n    | STRING_CONS settypestring pushcons \n    | FRACTION_CONS settypefrac pushcons \n    | DECIMAL_CONS settypedec pushcons \n    | TRUE settypebool pushcons\n    | FALSE settypebool pushconsexp : EXMARK expexp : LPAREN exp RPARENpushtype : emptypushid : pushtypepushdeclaredid : pushtypepushcons : pushtypeempty :'
    
_lr_action_items = {'DO':([35,58,65,68,69,70,71,72,73,74,75,79,85,114,117,159,164,184,187,195,196,198,199,201,202,204,206,207,208,209,210,211,214,215,216,217,],[-38,63,-21,-17,-18,-14,63,-20,-11,-15,-19,-16,-10,-26,-25,-23,-24,-22,-93,-58,-61,-93,-93,-93,-27,-34,-37,-28,-30,-32,-31,-93,-59,-60,-93,-33,]),'STRING_CONS':([86,89,94,101,103,106,110,115,116,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,187,195,196,197,211,214,215,],[99,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,-93,-58,-61,111,-93,-59,-60,]),'VOID':([4,8,10,13,35,42,59,73,80,81,85,],[5,5,5,5,-38,5,-6,-11,5,-5,-10,]),'WHILE':([35,58,65,68,69,70,71,72,73,74,75,79,85,97,114,117,159,164,184,187,195,196,198,199,201,202,204,206,207,208,209,210,211,214,215,216,217,],[-38,67,-21,-17,-18,-14,67,-20,-11,-15,-19,-16,-10,120,-26,-25,-23,-24,-22,-93,-58,-61,-93,-93,-93,-27,-34,-37,-28,-30,-32,-31,-93,-59,-60,-93,-33,]),'PROGRAM':([0,],[2,]),'PRINT':([35,58,65,68,69,70,71,72,73,74,75,79,85,114,117,159,164,184,187,195,196,198,199,201,202,204,206,207,208,209,210,211,214,215,216,217,],[-38,66,-21,-17,-18,-14,66,-20,-11,-15,-19,-16,-10,-26,-25,-23,-24,-22,-93,-58,-61,-93,-93,-93,-27,-34,-37,-28,-30,-32,-31,-93,-59,-60,-93,-33,]),'TRUE':([86,89,94,101,103,106,110,115,116,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,187,195,196,197,211,214,215,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-93,-58,-61,98,-93,-59,-60,]),'MINUS':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,147,-93,-93,-93,-93,-93,-93,147,-93,147,-91,-78,-93,147,-93,-92,-85,-82,-84,-83,-88,-86,-80,147,147,-74,-75,-77,147,147,147,147,147,147,-72,-76,-73,147,-81,-93,-79,]),'STRING':([4,8,10,13,35,42,59,73,80,81,85,],[11,11,11,11,-38,11,-6,-11,11,-5,-10,]),'LE':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,135,-93,-93,-93,-93,-93,-93,135,-93,135,-91,-78,-93,135,-93,-92,-85,-82,-84,-83,-88,-86,-80,135,-68,-74,-75,-77,135,-69,-65,-71,-67,-70,-72,-76,-73,135,-81,-93,-79,]),'RPAREN':([19,21,24,27,31,37,38,42,48,53,60,77,93,95,98,99,100,102,104,105,107,108,109,111,112,118,121,123,124,125,126,127,129,131,132,149,151,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,191,192,200,],[-45,-43,-46,-44,-47,-90,-89,46,54,-93,-8,91,117,-9,-93,122,-93,-93,128,-93,-62,-93,150,-93,-93,155,-93,-93,-93,-87,-93,163,-91,-78,-93,-93,185,-92,-85,-82,-84,-83,-88,-86,-80,-64,-68,-74,-75,-77,-66,-69,-65,-71,-67,-70,-72,-76,-73,-63,-81,194,199,-93,-79,]),'SEMI':([3,19,21,24,27,31,32,33,36,37,38,40,41,44,45,57,62,82,98,100,102,105,107,108,111,112,113,119,121,122,123,124,125,126,128,129,131,132,149,150,153,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,203,],[4,-45,-43,-46,-44,-47,35,-93,-93,-90,-89,-93,-49,-50,-39,-40,-93,-42,-93,-93,-93,-93,-62,-93,-93,-93,152,-41,-93,159,-93,-93,-87,-93,164,-91,-78,-93,-93,184,187,-92,-85,-82,-84,-83,-88,-86,-80,-64,-68,-74,-75,-77,-66,-69,-65,-71,-67,-70,-72,-76,-73,-63,-81,-93,-79,211,]),'NE':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,140,-93,-93,-93,-93,-93,-93,140,-93,140,-91,-78,-93,140,-93,-92,-85,-82,-84,-83,-88,-86,-80,140,-68,-74,-75,-77,140,-69,-65,-71,-67,-70,-72,-76,-73,140,-81,-93,-79,]),'LT':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,142,-93,-93,-93,-93,-93,-93,142,-93,142,-91,-78,-93,142,-93,-92,-85,-82,-84,-83,-88,-86,-80,142,-68,-74,-75,-77,142,-69,-65,-71,-67,-70,-72,-76,-73,142,-81,-93,-79,]),'DECIMAL_CONS':([86,89,94,101,103,106,110,115,116,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,187,195,196,197,211,214,215,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-93,-58,-61,100,-93,-59,-60,]),'PLUS':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,145,-93,-93,-93,-93,-93,-93,145,-93,145,-91,-78,-93,145,-93,-92,-85,-82,-84,-83,-88,-86,-80,145,145,-74,-75,-77,145,145,145,145,145,145,-72,-76,-73,145,-81,-93,-79,]),'FRACTION':([4,8,10,13,35,42,59,73,80,81,85,],[7,7,7,7,-38,7,-6,-11,7,-5,-10,]),'INTEGER':([4,8,10,13,35,42,59,73,80,81,85,],[9,9,9,9,-38,9,-6,-11,9,-5,-10,]),'DIF':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,139,-93,-93,-93,-93,-93,-93,-87,-93,139,-91,-78,-93,139,-93,-92,-85,-82,-84,-83,-88,-86,-80,-64,-68,-74,-75,-77,139,-69,-65,-71,-67,-70,-72,-76,-73,-63,-81,-93,-79,]),'$end':([1,6,10,20,23,59,73,81,85,],[0,-1,-4,-2,-3,-6,-11,-5,-10,]),'FUNCTION':([5,7,9,11,12,14,15,16,17,18,19,21,22,24,25,26,27,30,31,],[-93,-93,-93,-93,-93,29,-93,-57,-48,-56,-45,-43,-53,-46,-55,-54,-44,-52,-47,]),'GT':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,144,-93,-93,-93,-93,-93,-93,144,-93,144,-91,-78,-93,144,-93,-92,-85,-82,-84,-83,-88,-86,-80,144,-68,-74,-75,-77,144,-69,-65,-71,-67,-70,-72,-76,-73,144,-81,-93,-79,]),'MODULO':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,136,-93,-93,-93,-93,-93,-93,136,-93,136,-91,-78,-93,136,-93,-92,-85,-82,-84,-83,-88,-86,-80,136,136,-74,-75,-77,136,136,136,136,136,136,136,-76,136,136,-81,-93,-79,]),'DIVIDE':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,137,-93,-93,-93,-93,-93,-93,137,-93,137,-91,-78,-93,137,-93,-92,-85,-82,-84,-83,-88,-86,-80,137,137,-74,-75,-77,137,137,137,137,137,137,137,-76,137,137,-81,-93,-79,]),'EXMARK':([86,89,94,101,103,106,110,115,116,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,187,195,196,197,211,214,215,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-93,-58,-61,101,-93,-59,-60,]),'DECIMAL':([4,8,10,13,35,42,59,73,80,81,85,],[12,12,12,12,-38,12,-6,-11,12,-5,-10,]),'RBRACK':([19,21,24,27,31,38,49,55,56,98,100,102,105,107,108,111,112,121,123,124,125,126,129,131,132,133,149,154,157,158,160,161,162,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,62,-51,-93,-93,-93,-93,-62,-93,-93,-93,-93,-93,-93,-87,-93,-91,-78,-93,167,-93,188,-92,-85,-82,-84,-83,-88,192,-86,-80,-64,-68,-74,-75,-77,-66,-69,-65,-71,-67,-70,-72,-76,-73,-63,-81,-93,-79,]),'EQUALS':([37,38,77,90,92,188,],[-90,-89,-93,-93,115,197,]),'RBRACE':([35,58,64,65,68,69,70,71,72,73,74,75,79,85,88,114,117,159,164,184,187,195,196,198,199,201,202,204,206,207,208,209,210,211,214,215,216,217,],[-38,73,85,-21,-17,-18,-14,-12,-20,-11,-15,-19,-16,-10,-13,-26,-25,-23,-24,-22,-93,-58,-61,-93,-93,-93,-27,-34,-37,-28,-30,-32,-31,-93,-59,-60,-93,-33,]),'TIMES':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,146,-93,-93,-93,-93,-93,-93,146,-93,146,-91,-78,-93,146,-93,-92,-85,-82,-84,-83,-88,-86,-80,146,146,-74,-75,-77,146,146,146,146,146,146,146,-76,146,146,-81,-93,-79,]),'GE':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,143,-93,-93,-93,-93,-93,-93,143,-93,143,-91,-78,-93,143,-93,-92,-85,-82,-84,-83,-88,-86,-80,143,-68,-74,-75,-77,143,-69,-65,-71,-67,-70,-72,-76,-73,143,-81,-93,-79,]),'FRACTION_CONS':([86,89,94,101,103,106,110,115,116,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,187,195,196,197,211,214,215,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-93,-58,-61,102,-93,-59,-60,]),'LPAREN':([34,35,37,38,39,58,65,66,67,68,69,70,71,72,73,74,75,77,78,79,83,85,86,87,89,91,94,101,103,106,110,114,115,116,117,120,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,159,164,184,187,195,196,197,198,199,201,202,204,206,207,208,209,210,211,214,215,216,217,],[-93,-38,-90,-89,42,76,-21,86,-93,-17,-18,-14,76,-20,-11,-15,-19,93,94,-16,-29,-10,103,110,103,114,103,103,103,103,103,-26,103,103,-25,156,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-23,-24,-22,-93,-58,-61,103,-93,-93,-93,-27,-34,-37,-28,-30,-32,-31,-93,-59,-60,-93,-33,]),'VAR':([4,35,58,65,68,69,70,71,72,73,74,75,79,85,114,117,159,164,184,187,195,196,198,199,201,202,204,206,207,208,209,210,211,214,215,216,217,],[13,-38,13,-21,-17,-18,-14,13,-20,-11,-15,-19,-16,-10,-26,-25,-23,-24,-22,-93,-58,-61,-93,-93,-93,-27,-34,-37,-28,-30,-32,-31,-93,-59,-60,-93,-33,]),'ELSE':([73,85,198,],[-11,-10,205,]),'ID':([2,5,7,9,11,12,15,16,17,18,19,21,22,24,25,26,27,28,29,30,31,35,47,50,58,65,68,69,70,71,72,73,74,75,76,79,85,86,89,94,96,101,103,106,110,114,115,116,117,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,159,164,184,187,195,196,197,198,199,201,202,204,206,207,208,209,210,211,214,215,216,217,],[3,-93,-93,-93,-93,-93,-93,-57,-48,-56,-45,-43,-53,-46,-55,-54,-44,33,34,-52,-47,-38,53,33,77,-21,-17,-18,-14,77,-20,-11,-15,-19,90,-16,-10,104,112,112,33,112,112,112,112,-26,112,112,-25,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-23,-24,-22,-93,-58,-61,112,-93,-93,-93,-27,-34,-37,-28,-30,-32,-31,-93,-59,-60,-93,-33,]),'IF':([35,58,65,68,69,70,71,72,73,74,75,79,85,114,117,159,164,184,187,195,196,198,199,201,202,204,206,207,208,209,210,211,214,215,216,217,],[-38,78,-21,-17,-18,-14,78,-20,-11,-15,-19,-16,-10,-26,-25,-23,-24,-22,-93,-58,-61,-93,-93,-93,-27,-34,-37,-28,-30,-32,-31,-93,-59,-60,-93,-33,]),'AND':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,134,-93,-93,-93,-93,-93,-93,-87,-93,134,-91,-78,-93,134,-93,-92,-85,-82,-84,-83,-88,-86,-80,-64,-68,-74,-75,-77,134,-69,-65,-71,-67,-70,-72,-76,-73,134,-81,-93,-79,]),'LBRACE':([46,51,52,54,61,63,83,84,155,185,189,190,193,194,205,212,213,],[-93,58,-7,-93,58,-93,-29,58,-93,-93,58,-36,58,58,-93,-35,58,]),'FALSE':([86,89,94,101,103,106,110,115,116,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,187,195,196,197,211,214,215,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-93,-58,-61,105,-93,-59,-60,]),'POWER':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,138,-93,-93,-93,-93,-93,-93,138,-93,138,-91,-78,-93,138,-93,-92,-85,-82,-84,-83,-88,-86,-80,138,138,138,138,-77,138,138,138,138,138,138,138,138,138,138,-81,-93,-79,]),'LBRACK':([33,36,37,38,40,41,77,86,89,90,92,94,101,103,104,106,110,112,115,116,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,187,195,196,197,211,214,215,],[-93,-93,-90,-89,43,-49,-93,106,106,-93,116,106,106,106,130,106,106,130,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-93,-58,-61,106,-93,-59,-60,]),'SAME':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,141,-93,-93,-93,-93,-93,-93,141,-93,141,-91,-78,-93,141,-93,-92,-85,-82,-84,-83,-88,-86,-80,141,-68,-74,-75,-77,141,-69,-65,-71,-67,-70,-72,-76,-73,141,-81,-93,-79,]),'BOOLEAN':([4,8,10,13,35,42,59,73,80,81,85,],[15,15,15,15,-38,15,-6,-11,15,-5,-10,]),'INTEGER_CONS':([43,86,89,94,101,103,106,110,115,116,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,187,195,196,197,211,214,215,],[49,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-93,-58,-61,108,-93,-59,-60,]),'COMMA':([33,36,37,38,40,41,44,45,53,60,62,82,],[-93,-93,-90,-89,-93,-49,-50,50,-93,80,-93,96,]),'OR':([19,21,24,27,31,38,98,99,100,102,104,105,107,108,111,112,121,123,124,125,126,127,129,131,132,133,149,157,158,160,161,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,192,200,],[-45,-43,-46,-44,-47,-89,-93,-93,-93,-93,-93,-93,148,-93,-93,-93,-93,-93,-93,-87,-93,148,-91,-78,-93,148,-93,-92,-85,-82,-84,-83,-88,-86,-80,-64,-68,-74,-75,-77,148,-69,-65,-71,-67,-70,-72,-76,-73,-63,-81,-93,-79,]),}
>>>>>>> c7a4c9781f9867c9b91ca4f70626075ddf870676

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

<<<<<<< HEAD
_lr_goto_items = {'savefunc':([45,49,],[51,55,]),'updatecell':([244,],[249,]),'pushcons':([115,116,117,118,137,138,],[159,161,162,163,182,183,]),'gotot':([234,],[243,]),'comment':([58,71,148,],[64,64,64,]),'savevar':([38,],[42,]),'nortn':([58,69,],[65,101,]),'settypevoid':([12,],[28,]),'settypeint':([8,98,],[21,137,]),'type':([4,7,14,15,40,63,],[11,11,30,11,44,44,]),'assignment':([58,71,74,148,],[68,68,105,68,]),'startcount':([155,],[198,]),'statements':([58,71,148,],[69,103,189,]),'settypefrac':([6,90,],[18,115,]),'empty':([5,6,8,9,10,12,32,33,38,42,45,49,50,53,58,69,81,82,84,85,90,91,92,93,98,99,100,104,115,116,117,118,120,137,138,149,151,155,157,185,196,203,206,213,217,230,233,234,237,244,247,],[16,19,22,24,25,29,35,35,41,46,52,52,35,60,70,70,108,108,35,46,19,25,16,24,22,25,35,35,35,35,35,35,164,35,35,24,35,197,200,164,214,35,200,224,229,238,241,242,214,248,229,]),'dowhile':([58,71,148,],[80,80,80,]),'statement':([58,71,148,],[71,71,71,]),'block':([51,55,],[57,62,]),'gotoif':([230,],[239,]),'pushid':([32,33,50,84,104,],[37,38,56,111,144,]),'print':([58,71,148,],[72,72,72,]),'for':([58,71,148,],[73,73,73,]),'savereturn':([120,185,],[165,204,]),'blocknortn':([109,201,220,221,239,],[147,217,232,233,247,]),'settypebool':([10,91,99,],[26,116,138,]),'allocatevar':([42,85,],[48,112,]),'var':([4,58,71,148,],[15,75,75,75,]),'settypestring':([9,93,149,],[23,118,118,]),'while':([58,71,148,],[76,76,76,]),'settypedec':([5,92,],[17,117,]),'funcall':([58,71,148,],[78,78,78,]),'parameter':([40,63,],[43,86,]),'updatevar':([213,],[225,]),'program1':([4,7,15,],[13,20,31,]),'pushtype':([32,33,50,84,100,104,115,116,117,118,137,138,151,203,],[36,36,36,36,140,36,160,160,160,160,160,160,140,140,]),'gotof':([157,206,],[201,221,]),'exparam':([216,236,],[228,245,]),'program':([0,],[2,]),'function':([4,7,15,],[7,7,7,]),'pushjump':([81,82,],[107,109,]),'gotowhile':([233,],[240,]),'pushdeclaredid':([100,151,203,],[139,139,218,]),'updatejump':([217,247,],[231,251,]),'updatesize':([53,],[59,]),'expression':([67,88,102,105,110,141,146,152,153,186,198,207,223,227,],[95,113,143,145,150,184,187,194,195,205,216,222,235,236,]),'exp':([67,88,89,94,96,102,105,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,146,152,153,186,198,207,223,227,],[97,97,114,119,121,97,97,97,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,97,97,97,97,97,97,97,97,97,]),'var1':([30,54,156,],[34,61,199,]),'condition':([58,71,148,],[79,79,79,]),'assignvalues':([196,237,],[215,246,]),}
=======
_lr_goto_items = {'statements':([58,71,],[64,88,]),'updatejump':([198,216,],[204,217,]),'pushcons':([121,123,124,126,132,149,],[158,160,161,162,166,183,]),'settypevoid':([5,],[16,]),'funcall':([58,71,],[65,65,]),'pushdeclaredid':([104,112,192,],[131,131,200,]),'settypestring':([11,99,111,],[25,123,123,]),'type':([4,8,10,13,42,80,],[14,14,14,28,47,47,]),'pushjump':([63,67,],[84,87,]),'updatesize':([49,],[55,]),'gotowhile':([201,],[210,]),'allocatevar':([40,62,],[45,82,]),'program1':([4,8,10,],[6,20,23,]),'for':([58,71,],[68,68,]),'settypedec':([12,100,],[26,124,]),'updatevar':([187,],[195,]),'savefunc':([46,54,],[51,61,]),'dowhile':([58,71,],[69,69,]),'gotot':([199,],[207,]),'program':([0,],[1,]),'gotoif':([205,],[213,]),'statement':([58,71,],[71,71,]),'var':([4,58,71,],[8,72,72,]),'pushtype':([33,34,53,77,90,104,112,121,123,124,126,132,149,192,],[37,37,37,37,37,129,129,157,157,157,157,157,157,129,]),'empty':([5,7,9,11,12,15,33,34,36,40,46,49,53,54,62,63,67,77,90,98,99,100,102,104,105,108,111,112,121,123,124,126,132,149,155,185,187,192,198,199,201,205,211,216,],[17,19,21,24,27,31,38,38,41,44,52,56,38,52,44,83,83,38,38,31,24,27,19,38,31,21,24,38,38,38,38,38,38,38,190,190,196,38,206,208,209,212,215,206,]),'savevar':([36,],[40,]),'function':([4,8,10,],[10,10,10,]),'var1':([28,50,96,],[32,57,119,]),'assignment':([58,71,76,],[74,74,89,]),'print':([58,71,],[75,75,]),'settypebool':([15,98,105,],[30,121,132,]),'condition':([58,71,],[70,70,]),'gotof':([155,185,],[189,193,]),'parameter':([42,80,],[48,95,]),'while':([58,71,],[79,79,]),'settypefrac':([7,102,],[18,126,]),'pushid':([33,34,53,77,90,],[36,39,60,92,92,]),'exp':([86,89,94,101,103,106,110,115,116,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,152,156,197,],[107,107,107,125,127,133,107,107,107,107,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,107,107,107,]),'updatecell':([211,],[214,]),'settypeint':([9,108,],[22,149,]),'expression':([86,89,94,110,115,116,130,152,156,197,],[109,113,118,151,153,154,165,186,191,203,]),'block':([51,61,84,189,193,194,213,],[59,81,97,198,201,202,216,]),}
>>>>>>> c7a4c9781f9867c9b91ca4f70626075ddf870676

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
<<<<<<< HEAD
  ('program -> PROGRAM ID SEMI program1','program',4,'p_program','rexparse.py',211),
  ('program -> PROGRAM ID SEMI var program1','program',5,'p_program','rexparse.py',212),
  ('program1 -> function program1','program1',2,'p_program1','rexparse.py',216),
  ('program1 -> function','program1',1,'p_program1','rexparse.py',217),
  ('function -> type FUNCTION ID pushid LPAREN parameter RPAREN savefunc block','function',9,'p_function','rexparse.py',220),
  ('function -> type FUNCTION ID pushid LPAREN RPAREN savefunc block','function',8,'p_function','rexparse.py',221),
  ('savefunc -> empty','savefunc',1,'p_savefunc','rexparse.py',225),
  ('parameter -> type ID pushid','parameter',3,'p_parameter','rexparse.py',246),
  ('parameter -> type ID pushid COMMA parameter','parameter',5,'p_parameter','rexparse.py',247),
  ('block -> LBRACE statements RETURN expression SEMI savereturn RBRACE','block',7,'p_block','rexparse.py',251),
  ('block -> LBRACE RETURN expression SEMI savereturn RBRACE','block',6,'p_block','rexparse.py',252),
  ('block -> LBRACE statements nortn RBRACE','block',4,'p_block','rexparse.py',253),
  ('block -> LBRACE nortn RBRACE','block',3,'p_block','rexparse.py',254),
  ('blocknortn -> LBRACE statements RBRACE','blocknortn',3,'p_blocknortn','rexparse.py',259),
  ('blocknortn -> LBRACE RBRACE','blocknortn',2,'p_blocknortn','rexparse.py',260),
  ('nortn -> empty','nortn',1,'p_nortn','rexparse.py',263),
  ('savereturn -> empty','savereturn',1,'p_savereturn','rexparse.py',270),
  ('statements -> statement','statements',1,'p_statements','rexparse.py',284),
  ('statements -> statement statements','statements',2,'p_statements','rexparse.py',285),
  ('statement -> condition','statement',1,'p_statement','rexparse.py',289),
  ('statement -> assignment','statement',1,'p_statement','rexparse.py',290),
  ('statement -> while','statement',1,'p_statement','rexparse.py',291),
  ('statement -> for','statement',1,'p_statement','rexparse.py',292),
  ('statement -> dowhile','statement',1,'p_statement','rexparse.py',293),
  ('statement -> comment','statement',1,'p_statement','rexparse.py',294),
  ('statement -> print','statement',1,'p_statement','rexparse.py',295),
  ('statement -> var','statement',1,'p_statement','rexparse.py',296),
  ('statement -> funcall','statement',1,'p_statement','rexparse.py',297),
  ('print -> PRINT LPAREN expression RPAREN SEMI','print',5,'p_print','rexparse.py',301),
  ('print -> PRINT LPAREN STRING_CONS RPAREN SEMI','print',5,'p_print','rexparse.py',302),
  ('print -> PRINT LPAREN ID RPAREN SEMI','print',5,'p_print','rexparse.py',303),
  ('funcall -> ID pushid LPAREN startcount expression exparam RPAREN assignvalues SEMI','funcall',9,'p_funcall','rexparse.py',306),
  ('funcall -> ID pushid RPAREN LPAREN assignvalues SEMI','funcall',6,'p_funcall','rexparse.py',307),
  ('startcount -> empty','startcount',1,'p_startcount','rexparse.py',310),
  ('exparam -> COMMA expression exparam','exparam',3,'p_exparam','rexparse.py',315),
  ('exparam -> COMMA expression','exparam',2,'p_exparam','rexparse.py',316),
  ('assignvalues -> empty','assignvalues',1,'p_assignvalues','rexparse.py',319),
  ('comment -> COMMENT ID','comment',2,'p_comment','rexparse.py',345),
  ('for -> LPAREN assignment expression SEMI expression RPAREN blocknortn','for',7,'p_for','rexparse.py',349),
  ('dowhile -> DO pushjump blocknortn WHILE LPAREN expression RPAREN gotot','dowhile',8,'p_dowhile','rexparse.py',353),
  ('pushjump -> empty','pushjump',1,'p_pushjump','rexparse.py',357),
  ('gotot -> empty','gotot',1,'p_gotot','rexparse.py',361),
  ('while -> WHILE pushjump LPAREN expression RPAREN gotof blocknortn gotowhile','while',8,'p_while','rexparse.py',373),
  ('gotowhile -> empty','gotowhile',1,'p_gotowhile','rexparse.py',377),
  ('condition -> IF LPAREN expression RPAREN gotof blocknortn ELSE gotoif blocknortn updatejump','condition',10,'p_condition','rexparse.py',385),
  ('condition -> IF LPAREN expression RPAREN gotof blocknortn updatejump','condition',7,'p_condition','rexparse.py',386),
  ('gotoif -> empty','gotoif',1,'p_gotoif','rexparse.py',391),
  ('gotof -> empty','gotof',1,'p_gotof','rexparse.py',399),
  ('updatejump -> empty','updatejump',1,'p_updatejump','rexparse.py',410),
  ('var -> VAR type var1 SEMI','var',4,'p_var','rexparse.py',415),
  ('var1 -> ID pushid savevar allocatevar','var1',4,'p_var1','rexparse.py',419),
  ('var1 -> ID pushid savevar allocatevar COMMA var1','var1',6,'p_var1','rexparse.py',420),
  ('var1 -> ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevar COMMA var1','var1',10,'p_var1','rexparse.py',421),
  ('var1 -> ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevar','var1',8,'p_var1','rexparse.py',422),
  ('settypeint -> empty','settypeint',1,'p_settypeint','rexparse.py',426),
  ('settypedec -> empty','settypedec',1,'p_settypedec','rexparse.py',431),
  ('settypefrac -> empty','settypefrac',1,'p_settypefrac','rexparse.py',436),
  ('settypestring -> empty','settypestring',1,'p_settypestring','rexparse.py',441),
  ('settypebool -> empty','settypebool',1,'p_settypebool','rexparse.py',446),
  ('settypevoid -> empty','settypevoid',1,'p_settypevoid','rexparse.py',451),
  ('savevar -> empty','savevar',1,'p_savevar','rexparse.py',456),
  ('allocatevar -> empty','allocatevar',1,'p_allocatevar','rexparse.py',474),
  ('updatesize -> empty','updatesize',1,'p_updatesize','rexparse.py',479),
  ('type -> BOOLEAN settypebool','type',2,'p_type','rexparse.py',484),
  ('type -> INTEGER settypeint','type',2,'p_type','rexparse.py',485),
  ('type -> DECIMAL settypedec','type',2,'p_type','rexparse.py',486),
  ('type -> STRING settypestring','type',2,'p_type','rexparse.py',487),
  ('type -> FRACTION settypefrac','type',2,'p_type','rexparse.py',488),
  ('type -> VOID settypevoid','type',2,'p_type','rexparse.py',489),
  ('assignment -> ID pushid EQUALS expression SEMI updatevar','assignment',6,'p_assignment','rexparse.py',493),
  ('assignment -> ID pushid LBRACK expression RBRACK EQUALS expression SEMI updatecell','assignment',9,'p_assignment','rexparse.py',494),
  ('updatecell -> empty','updatecell',1,'p_updatecell','rexparse.py',498),
  ('updatevar -> empty','updatevar',1,'p_updatevar','rexparse.py',517),
  ('expression -> exp','expression',1,'p_expression','rexparse.py',533),
  ('exp -> exp OR exp','exp',3,'p_exp','rexparse.py',538),
  ('exp -> exp AND exp','exp',3,'p_exp','rexparse.py',539),
  ('exp -> exp SAME exp','exp',3,'p_exp','rexparse.py',540),
  ('exp -> exp DIF exp','exp',3,'p_exp','rexparse.py',541),
  ('exp -> exp GE exp','exp',3,'p_exp','rexparse.py',542),
  ('exp -> exp LE exp','exp',3,'p_exp','rexparse.py',543),
  ('exp -> exp NE exp','exp',3,'p_exp','rexparse.py',544),
  ('exp -> exp GT exp','exp',3,'p_exp','rexparse.py',545),
  ('exp -> exp LT exp','exp',3,'p_exp','rexparse.py',546),
  ('exp -> exp PLUS exp','exp',3,'p_exp','rexparse.py',547),
  ('exp -> exp MINUS exp','exp',3,'p_exp','rexparse.py',548),
  ('exp -> exp MODULO exp','exp',3,'p_exp','rexparse.py',549),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','rexparse.py',550),
  ('exp -> exp TIMES exp','exp',3,'p_exp','rexparse.py',551),
  ('exp -> exp POWER exp','exp',3,'p_exp','rexparse.py',552),
  ('exp -> ID pushdeclaredid','exp',2,'p_exp2','rexparse.py',571),
  ('exp -> ID LBRACK expression RBRACK pushdeclaredid','exp',5,'p_exp2','rexparse.py',572),
  ('exp -> LBRACK exp RBRACK','exp',3,'p_exp2','rexparse.py',573),
  ('exp -> INTEGER_CONS settypeint pushcons','exp',3,'p_exp2','rexparse.py',574),
  ('exp -> STRING_CONS settypestring pushcons','exp',3,'p_exp2','rexparse.py',575),
  ('exp -> FRACTION_CONS settypefrac pushcons','exp',3,'p_exp2','rexparse.py',576),
  ('exp -> DECIMAL_CONS settypedec pushcons','exp',3,'p_exp2','rexparse.py',577),
  ('exp -> TRUE settypebool pushcons','exp',3,'p_exp2','rexparse.py',578),
  ('exp -> FALSE settypebool pushcons','exp',3,'p_exp2','rexparse.py',579),
  ('exp -> EXMARK exp','exp',2,'p_expunary','rexparse.py',586),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_expgroup','rexparse.py',597),
  ('pushtype -> empty','pushtype',1,'p_pushtype','rexparse.py',601),
  ('pushid -> pushtype','pushid',1,'p_pushid','rexparse.py',613),
  ('pushdeclaredid -> pushtype','pushdeclaredid',1,'p_pushdeclaredid','rexparse.py',618),
  ('pushcons -> pushtype','pushcons',1,'p_pushcons','rexparse.py',627),
  ('empty -> <empty>','empty',0,'p_empty','rexparse.py',639),
=======
  ('program -> PROGRAM ID SEMI program1','program',4,'p_program','rexparse.py',186),
  ('program -> PROGRAM ID SEMI var program1','program',5,'p_program','rexparse.py',187),
  ('program1 -> function program1','program1',2,'p_program1','rexparse.py',191),
  ('program1 -> function','program1',1,'p_program1','rexparse.py',192),
  ('function -> type FUNCTION ID pushid LPAREN parameter RPAREN savefunc block','function',9,'p_function','rexparse.py',195),
  ('function -> type FUNCTION ID pushid LPAREN RPAREN savefunc block','function',8,'p_function','rexparse.py',196),
  ('savefunc -> empty','savefunc',1,'p_savefunc','rexparse.py',200),
  ('parameter -> type ID pushid','parameter',3,'p_parameter','rexparse.py',223),
  ('parameter -> type ID pushid COMMA parameter','parameter',5,'p_parameter','rexparse.py',224),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','rexparse.py',228),
  ('block -> LBRACE RBRACE','block',2,'p_block','rexparse.py',229),
  ('statements -> statement','statements',1,'p_statements','rexparse.py',233),
  ('statements -> statement statements','statements',2,'p_statements','rexparse.py',234),
  ('statement -> condition','statement',1,'p_statement','rexparse.py',238),
  ('statement -> assignment','statement',1,'p_statement','rexparse.py',239),
  ('statement -> while','statement',1,'p_statement','rexparse.py',240),
  ('statement -> for','statement',1,'p_statement','rexparse.py',241),
  ('statement -> dowhile','statement',1,'p_statement','rexparse.py',242),
  ('statement -> print','statement',1,'p_statement','rexparse.py',243),
  ('statement -> var','statement',1,'p_statement','rexparse.py',244),
  ('statement -> funcall','statement',1,'p_statement','rexparse.py',245),
  ('print -> PRINT LPAREN expression RPAREN SEMI','print',5,'p_print','rexparse.py',249),
  ('print -> PRINT LPAREN STRING_CONS RPAREN SEMI','print',5,'p_print','rexparse.py',250),
  ('print -> PRINT LPAREN ID RPAREN SEMI','print',5,'p_print','rexparse.py',251),
  ('funcall -> ID LPAREN RPAREN','funcall',3,'p_funcall','rexparse.py',254),
  ('funcall -> ID RPAREN LPAREN','funcall',3,'p_funcall','rexparse.py',255),
  ('for -> LPAREN assignment expression SEMI expression RPAREN block','for',7,'p_for','rexparse.py',258),
  ('dowhile -> DO pushjump block WHILE LPAREN expression RPAREN gotot','dowhile',8,'p_dowhile','rexparse.py',262),
  ('pushjump -> empty','pushjump',1,'p_pushjump','rexparse.py',266),
  ('gotot -> empty','gotot',1,'p_gotot','rexparse.py',270),
  ('while -> WHILE pushjump LPAREN expression RPAREN gotof block gotowhile','while',8,'p_while','rexparse.py',282),
  ('gotowhile -> empty','gotowhile',1,'p_gotowhile','rexparse.py',286),
  ('condition -> IF LPAREN expression RPAREN gotof block ELSE gotoif block updatejump','condition',10,'p_condition','rexparse.py',294),
  ('condition -> IF LPAREN expression RPAREN gotof block updatejump','condition',7,'p_condition','rexparse.py',295),
  ('gotoif -> empty','gotoif',1,'p_gotoif','rexparse.py',300),
  ('gotof -> empty','gotof',1,'p_gotof','rexparse.py',308),
  ('updatejump -> empty','updatejump',1,'p_updatejump','rexparse.py',319),
  ('var -> VAR type var1 SEMI','var',4,'p_var','rexparse.py',324),
  ('var1 -> ID pushid savevar allocatevar','var1',4,'p_var1','rexparse.py',328),
  ('var1 -> ID pushid savevar allocatevar COMMA var1','var1',6,'p_var1','rexparse.py',329),
  ('var1 -> ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevar COMMA var1','var1',10,'p_var1','rexparse.py',330),
  ('var1 -> ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevar','var1',8,'p_var1','rexparse.py',331),
  ('settypeint -> empty','settypeint',1,'p_settypeint','rexparse.py',335),
  ('settypedec -> empty','settypedec',1,'p_settypedec','rexparse.py',340),
  ('settypefrac -> empty','settypefrac',1,'p_settypefrac','rexparse.py',345),
  ('settypestring -> empty','settypestring',1,'p_settypestring','rexparse.py',350),
  ('settypebool -> empty','settypebool',1,'p_settypebool','rexparse.py',355),
  ('settypevoid -> empty','settypevoid',1,'p_settypevoid','rexparse.py',360),
  ('savevar -> empty','savevar',1,'p_savevar','rexparse.py',365),
  ('allocatevar -> empty','allocatevar',1,'p_allocatevar','rexparse.py',383),
  ('updatesize -> empty','updatesize',1,'p_updatesize','rexparse.py',388),
  ('type -> BOOLEAN settypebool','type',2,'p_type','rexparse.py',393),
  ('type -> INTEGER settypeint','type',2,'p_type','rexparse.py',394),
  ('type -> DECIMAL settypedec','type',2,'p_type','rexparse.py',395),
  ('type -> STRING settypestring','type',2,'p_type','rexparse.py',396),
  ('type -> FRACTION settypefrac','type',2,'p_type','rexparse.py',397),
  ('type -> VOID settypevoid','type',2,'p_type','rexparse.py',398),
  ('assignment -> ID pushid EQUALS expression SEMI updatevar','assignment',6,'p_assignment','rexparse.py',402),
  ('assignment -> ID pushid LBRACK expression RBRACK EQUALS expression SEMI updatecell','assignment',9,'p_assignment','rexparse.py',403),
  ('updatecell -> empty','updatecell',1,'p_updatecell','rexparse.py',407),
  ('updatevar -> empty','updatevar',1,'p_updatevar','rexparse.py',426),
  ('expression -> exp','expression',1,'p_expression','rexparse.py',442),
  ('exp -> exp OR exp','exp',3,'p_exp','rexparse.py',447),
  ('exp -> exp AND exp','exp',3,'p_exp','rexparse.py',448),
  ('exp -> exp SAME exp','exp',3,'p_exp','rexparse.py',449),
  ('exp -> exp DIF exp','exp',3,'p_exp','rexparse.py',450),
  ('exp -> exp GE exp','exp',3,'p_exp','rexparse.py',451),
  ('exp -> exp LE exp','exp',3,'p_exp','rexparse.py',452),
  ('exp -> exp NE exp','exp',3,'p_exp','rexparse.py',453),
  ('exp -> exp GT exp','exp',3,'p_exp','rexparse.py',454),
  ('exp -> exp LT exp','exp',3,'p_exp','rexparse.py',455),
  ('exp -> exp PLUS exp','exp',3,'p_exp','rexparse.py',456),
  ('exp -> exp MINUS exp','exp',3,'p_exp','rexparse.py',457),
  ('exp -> exp MODULO exp','exp',3,'p_exp','rexparse.py',458),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','rexparse.py',459),
  ('exp -> exp TIMES exp','exp',3,'p_exp','rexparse.py',460),
  ('exp -> exp POWER exp','exp',3,'p_exp','rexparse.py',461),
  ('exp -> ID pushdeclaredid','exp',2,'p_exp2','rexparse.py',476),
  ('exp -> ID LBRACK expression RBRACK pushdeclaredid','exp',5,'p_exp2','rexparse.py',477),
  ('exp -> LBRACK exp RBRACK','exp',3,'p_exp2','rexparse.py',478),
  ('exp -> INTEGER_CONS settypeint pushcons','exp',3,'p_exp2','rexparse.py',479),
  ('exp -> STRING_CONS settypestring pushcons','exp',3,'p_exp2','rexparse.py',480),
  ('exp -> FRACTION_CONS settypefrac pushcons','exp',3,'p_exp2','rexparse.py',481),
  ('exp -> DECIMAL_CONS settypedec pushcons','exp',3,'p_exp2','rexparse.py',482),
  ('exp -> TRUE settypebool pushcons','exp',3,'p_exp2','rexparse.py',483),
  ('exp -> FALSE settypebool pushcons','exp',3,'p_exp2','rexparse.py',484),
  ('exp -> EXMARK exp','exp',2,'p_expunary','rexparse.py',488),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_expgroup','rexparse.py',499),
  ('pushtype -> empty','pushtype',1,'p_pushtype','rexparse.py',503),
  ('pushid -> pushtype','pushid',1,'p_pushid','rexparse.py',515),
  ('pushdeclaredid -> pushtype','pushdeclaredid',1,'p_pushdeclaredid','rexparse.py',520),
  ('pushcons -> pushtype','pushcons',1,'p_pushcons','rexparse.py',529),
  ('empty -> <empty>','empty',0,'p_empty','rexparse.py',541),
>>>>>>> c7a4c9781f9867c9b91ca4f70626075ddf870676
]


# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightEXMARKleftGTLTGELENESAMEleftPLUSMINUSleftTIMESDIVIDEMODULOleftPOWEREQUALS PLUS MINUS TIMES DIVIDE POWER MODULO LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK NEWLINE COMMA ID SEMI COLON RQUOTE LQUOTE LT LE GT GE NE EXMARK DECIMAL_CONS INTEGER_CONS STRING_CONS FRACTION_CONS DIF COMMENT SAME TRUE ELSE FALSE PROGRAM NOT IF INTEGER FRACTION VOID RETURN AND DECIMAL OR STRING PRINT FUNCTION FOR VAR BOOLEAN WHILEprogram : PROGRAM ID SEMI function\n    | PROGRAM ID SEMI var functionfunction : FUNCTION ID LPAREN parameter RPAREN RETURN type block\n    | FUNCTION ID LPAREN RPAREN RETURN type block\n    | FUNCTION ID LPAREN RPAREN block\n    | FUNCTION ID LPAREN parameter RPAREN blockparameter : ID COLON type\n    | ID COLON type COMMA parameterblock : LBRACE statements RBRACE\n    | LBRACE RBRACEstatements : statement\n    | statement statements\n    statement : condition\n    | assignment \n    | while\n    | for\n    | comment\n    | print\n    | varprint : PRINT LPAREN expression RPAREN SEMI\n    | PRINT LPAREN STRING_CONS RPAREN SEMI\n    | PRINT LPAREN ID RPAREN SEMIcomment : COMMENT IDfor : LPAREN assignment expression SEMI expression RPAREN blockwhile : WHILE LPAREN expression RPAREN gotof block gotowhile updatejumpgotowhile : emptycondition : IF LPAREN expression RPAREN gotof block updatejump ELSE gotoif block updatejump\n    | IF LPAREN expression RPAREN gotof block updatejumpgotoif : emptygotof : emptyupdatejump : emptyvar : VAR type var1 SEMIvar1 : ID savevar\n    | ID savevar COMMA var1settypeint : emptysettypedec : emptysettypefrac : emptysettypestring : emptysettypebool : emptysavevar : emptytype : BOOLEAN settypebool\n    | INTEGER settypeint\n    | DECIMAL settypedec\n    | STRING settypestring\n    | FRACTION settypefracassignment : type ID EQUALS expression SEMI\n    | ID EQUALS expression SEMIexpression : exp\n    exp : exp OR exp\n    | exp AND exp\n    | exp SAME exp\n    | exp DIF exp\n    | exp GE exp\n    | exp LE exp\n    | exp NE exp\n    | exp GT exp\n    | exp LT exp\n    | exp PLUS exp\n    | exp MINUS exp\n    | exp MODULO exp\n    | exp DIVIDE exp\n    | exp TIMES exp\n    | exp POWER expexp : ID pushid\n    | ID LBRACK expression RBRACK pushid\n    | LBRACK exp RBRACK\n    | INTEGER_CONS settypeint pushcons\n    | STRING_CONS settypestring pushcons \n    | FRACTION_CONS settypefrac pushcons \n    | DECIMAL_CONS settypedec pushcons \n    | TRUE settypebool pushcons\n    | FALSE settypebool pushconsexp : EXMARK expexp : LPAREN exp RPARENpushtype : emptypushid : pushtypepushcons : pushtypeempty :'
    
_lr_action_items = {'FUNCTION':([4,8,35,],[5,5,-32,]),'GT':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,103,-78,-78,-78,-78,-78,-78,-78,-78,103,-78,103,103,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,103,103,103,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),'POWER':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,117,-78,-78,-78,-78,-78,-78,-78,-78,117,-78,117,117,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-63,-68,-71,-69,-67,-78,-65,]),'$end':([1,7,16,37,44,60,64,72,95,],[0,-1,-2,-5,-10,-6,-4,-9,-3,]),'MINUS':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,108,-78,-78,-78,-78,-78,-78,-78,-78,108,-78,108,108,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,108,108,-61,-60,108,-59,-62,108,108,108,108,108,-58,108,-63,-68,-71,-69,-67,-78,-65,]),'LPAREN':([9,35,38,43,44,45,47,48,49,51,52,54,57,58,59,66,67,68,69,70,72,73,77,80,81,91,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[17,-32,46,46,-10,-13,-16,-19,67,-18,-14,70,73,-17,-15,81,81,81,-23,81,-9,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'DECIMAL_CONS':([66,67,68,70,73,77,80,81,91,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,162,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-47,-46,]),'BOOLEAN':([6,35,36,38,40,43,44,45,46,47,48,51,52,58,59,61,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[15,-32,15,15,15,15,-10,-13,15,-16,-19,-18,-14,-17,-15,15,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'EXMARK':([66,67,68,70,73,77,80,81,91,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,162,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-47,-46,]),'SEMI':([3,19,21,23,25,26,27,29,33,34,63,76,78,79,82,83,84,85,86,87,89,97,100,101,118,119,121,122,123,124,125,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[4,-35,-38,-37,-36,-78,35,-39,-40,-33,-34,-78,99,-78,-48,-78,-78,-78,-78,-78,127,-78,-78,-73,-64,-76,-75,-78,-78,-78,-78,162,163,164,165,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,-52,-50,-49,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),'FALSE':([66,67,68,70,73,77,80,81,91,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,162,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-47,-46,]),'LE':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,104,-78,-78,-78,-78,-78,-78,-78,-78,104,-78,104,104,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,104,104,104,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),'COLON':([32,],[40,]),'VAR':([4,35,38,43,44,45,47,48,51,52,58,59,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[6,-32,6,6,-10,-13,-16,-19,-18,-14,-17,-15,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'EQUALS':([50,71,],[68,91,]),'FRACTION':([6,35,36,38,40,43,44,45,46,47,48,51,52,58,59,61,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[12,-32,12,12,12,12,-10,-13,12,-16,-19,-18,-14,-17,-15,12,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'LBRACK':([66,67,68,70,73,77,80,81,83,91,93,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,162,],[77,77,77,77,77,77,77,77,120,77,120,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-47,-46,]),'DIF':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,111,-78,-78,-78,-78,-78,-78,-78,-78,111,-78,-73,111,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,111,-50,-49,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),'TRUE':([66,67,68,70,73,77,80,81,91,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,162,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-47,-46,]),'GE':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,114,-78,-78,-78,-78,-78,-78,-78,-78,114,-78,114,114,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,114,114,114,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),'RETURN':([30,39,],[36,61,]),'ELSE':([44,72,169,174,175,],[-10,-9,-78,177,-31,]),'COMMENT':([35,38,43,44,45,47,48,51,52,58,59,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[-32,53,53,-10,-13,-16,-19,-18,-14,-17,-15,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'FRACTION_CONS':([66,67,68,70,73,77,80,81,91,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,162,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-47,-46,]),'COMMA':([10,11,12,13,15,18,19,20,21,22,23,24,25,26,28,29,33,34,62,],[-78,-78,-78,-78,-78,-42,-35,-44,-38,-45,-37,-43,-36,-78,-41,-39,-40,41,75,]),'PRINT':([35,38,43,44,45,47,48,51,52,58,59,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[-32,57,57,-10,-13,-16,-19,-18,-14,-17,-15,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'MODULO':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,106,-78,-78,-78,-78,-78,-78,-78,-78,106,-78,106,106,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,106,106,-61,-60,106,106,-62,106,106,106,106,106,106,106,-63,-68,-71,-69,-67,-78,-65,]),'INTEGER':([6,35,36,38,40,43,44,45,46,47,48,51,52,58,59,61,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[10,-32,10,10,10,10,-10,-13,10,-16,-19,-18,-14,-17,-15,10,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'STRING':([6,35,36,38,40,43,44,45,46,47,48,51,52,58,59,61,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[11,-32,11,11,11,11,-10,-13,11,-16,-19,-18,-14,-17,-15,11,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'RBRACE':([35,38,43,44,45,47,48,51,52,56,58,59,65,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[-32,44,-11,-10,-13,-16,-19,-18,-14,72,-17,-15,-12,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'DECIMAL':([6,35,36,38,40,43,44,45,46,47,48,51,52,58,59,61,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[13,-32,13,13,13,13,-10,-13,13,-16,-19,-18,-14,-17,-15,13,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'PROGRAM':([0,],[2,]),'LT':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,110,-78,-78,-78,-78,-78,-78,-78,-78,110,-78,110,110,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,110,110,110,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),'WHILE':([35,38,43,44,45,47,48,51,52,58,59,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[-32,49,49,-10,-13,-16,-19,-18,-14,-17,-15,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'ID':([2,5,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,28,29,35,38,41,43,44,45,46,47,48,51,52,53,55,58,59,66,67,68,69,70,72,73,75,77,80,81,91,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[3,9,-78,-78,-78,-78,26,-78,32,-42,-35,-44,-38,-45,-37,-43,-36,-41,-39,-32,50,26,50,-10,-13,50,-16,-19,-18,-14,69,71,-17,-15,83,83,83,-23,83,-9,93,32,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'RBRACK':([19,21,23,25,29,76,79,82,83,84,85,86,87,97,98,100,101,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,-48,-78,-78,-78,-78,-78,-78,135,-78,-73,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,-52,-50,-49,-53,-58,-51,-63,167,-68,-71,-69,-67,-78,-65,]),'DIVIDE':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,105,-78,-78,-78,-78,-78,-78,-78,-78,105,-78,105,105,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,105,105,-61,-60,105,105,-62,105,105,105,105,105,105,105,-63,-68,-71,-69,-67,-78,-65,]),'STRING_CONS':([66,67,68,70,73,77,80,81,91,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,162,],[84,84,84,84,94,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-47,-46,]),'NE':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,107,-78,-78,-78,-78,-78,-78,-78,-78,107,-78,107,107,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,107,107,107,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),'LBRACE':([10,11,12,13,15,18,19,20,21,22,23,24,25,28,29,30,39,42,74,126,128,159,160,161,166,177,178,179,],[-78,-78,-78,-78,-78,-42,-35,-44,-38,-45,-37,-43,-36,-41,-39,38,38,38,38,-78,-78,38,-30,38,38,-78,38,-29,]),'TIMES':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,109,-78,-78,-78,-78,-78,-78,-78,-78,109,-78,109,109,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,109,109,-61,-60,109,109,-62,109,109,109,109,109,109,109,-63,-68,-71,-69,-67,-78,-65,]),'AND':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,112,-78,-78,-78,-78,-78,-78,-78,-78,112,-78,-73,112,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,112,-50,112,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),'SAME':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,116,-78,-78,-78,-78,-78,-78,-78,-78,116,-78,116,116,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,116,116,116,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),'RPAREN':([10,11,12,13,15,17,18,19,20,21,22,23,24,25,28,29,31,62,76,79,82,83,84,85,86,87,88,90,92,93,94,96,97,100,101,102,118,119,121,122,123,124,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-78,-78,-78,-78,-78,30,-42,-35,-44,-38,-45,-37,-43,-36,-41,-39,39,-7,-78,-78,-48,-78,-78,-78,-78,-78,126,128,130,131,132,-8,-78,-78,-73,138,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,166,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,-52,-50,-49,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),'PLUS':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,115,-78,-78,-78,-78,-78,-78,-78,-78,115,-78,115,115,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,115,115,-61,-60,115,-59,-62,115,115,115,115,115,-58,115,-63,-68,-71,-69,-67,-78,-65,]),'IF':([35,38,43,44,45,47,48,51,52,58,59,69,72,127,162,163,164,165,168,169,170,172,173,174,175,176,180,181,],[-32,54,54,-10,-13,-16,-19,-18,-14,-17,-15,-23,-9,-47,-46,-20,-22,-21,-78,-78,-24,-78,-26,-28,-31,-25,-78,-27,]),'INTEGER_CONS':([66,67,68,70,73,77,80,81,91,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,127,162,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-47,-46,]),'OR':([19,21,23,25,29,76,79,82,83,84,85,86,87,93,94,97,98,100,101,102,118,119,121,122,123,124,125,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,167,171,],[-35,-38,-37,-36,-39,-78,-78,113,-78,-78,-78,-78,-78,-78,-78,-78,113,-78,-73,113,-64,-76,-75,-78,-78,-78,-78,-72,-77,-66,-70,-74,-56,-54,-61,-60,-55,-59,-62,-57,113,-50,-49,-53,-58,-51,-63,-68,-71,-69,-67,-78,-65,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'settypedec':([13,79,],[24,100,]),'statement':([38,43,],[43,43,]),'condition':([38,43,],[45,45,]),'pushid':([83,93,167,],[118,118,171,]),'updatejump':([169,172,180,],[174,176,181,]),'gotof':([126,128,],[159,161,]),'type':([6,36,38,40,43,46,61,],[14,42,55,62,55,55,74,]),'empty':([10,11,12,13,15,26,76,79,83,84,85,86,87,93,94,97,100,122,123,124,125,126,128,167,168,169,172,177,180,],[19,21,23,25,29,33,29,25,121,21,29,23,19,121,21,121,121,121,121,121,121,160,160,121,173,175,175,179,175,]),'parameter':([17,75,],[31,96,]),'for':([38,43,],[47,47,]),'savevar':([26,],[34,]),'gotoif':([177,],[178,]),'statements':([38,43,],[56,65,]),'exp':([66,67,68,70,73,77,80,81,91,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,],[82,82,82,82,82,98,101,102,82,82,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,82,]),'pushcons':([97,100,122,123,124,125,],[133,137,155,156,157,158,]),'settypeint':([10,87,],[18,125,]),'settypefrac':([12,86,],[22,124,]),'var':([4,38,43,],[8,48,48,]),'program':([0,],[1,]),'pushtype':([83,93,97,100,122,123,124,125,167,],[119,119,134,134,134,134,134,134,119,]),'settypestring':([11,84,94,],[20,122,122,]),'settypebool':([15,76,85,],[28,97,123,]),'expression':([66,67,68,70,73,91,99,120,],[78,88,89,90,92,129,136,154,]),'function':([4,8,],[7,16,]),'var1':([14,41,],[27,63,]),'print':([38,43,],[51,51,]),'assignment':([38,43,46,],[52,52,66,]),'gotowhile':([168,],[172,]),'block':([30,39,42,74,159,161,166,178,],[37,60,64,95,168,169,170,180,]),'comment':([38,43,],[58,58,]),'while':([38,43,],[59,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMI function','program',4,'p_program','rexparse.py',99),
  ('program -> PROGRAM ID SEMI var function','program',5,'p_program','rexparse.py',100),
  ('function -> FUNCTION ID LPAREN parameter RPAREN RETURN type block','function',8,'p_function','rexparse.py',104),
  ('function -> FUNCTION ID LPAREN RPAREN RETURN type block','function',7,'p_function','rexparse.py',105),
  ('function -> FUNCTION ID LPAREN RPAREN block','function',5,'p_function','rexparse.py',106),
  ('function -> FUNCTION ID LPAREN parameter RPAREN block','function',6,'p_function','rexparse.py',107),
  ('parameter -> ID COLON type','parameter',3,'p_parameter','rexparse.py',111),
  ('parameter -> ID COLON type COMMA parameter','parameter',5,'p_parameter','rexparse.py',112),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','rexparse.py',116),
  ('block -> LBRACE RBRACE','block',2,'p_block','rexparse.py',117),
  ('statements -> statement','statements',1,'p_statements','rexparse.py',121),
  ('statements -> statement statements','statements',2,'p_statements','rexparse.py',122),
  ('statement -> condition','statement',1,'p_statement','rexparse.py',126),
  ('statement -> assignment','statement',1,'p_statement','rexparse.py',127),
  ('statement -> while','statement',1,'p_statement','rexparse.py',128),
  ('statement -> for','statement',1,'p_statement','rexparse.py',129),
  ('statement -> comment','statement',1,'p_statement','rexparse.py',130),
  ('statement -> print','statement',1,'p_statement','rexparse.py',131),
  ('statement -> var','statement',1,'p_statement','rexparse.py',132),
  ('print -> PRINT LPAREN expression RPAREN SEMI','print',5,'p_print','rexparse.py',136),
  ('print -> PRINT LPAREN STRING_CONS RPAREN SEMI','print',5,'p_print','rexparse.py',137),
  ('print -> PRINT LPAREN ID RPAREN SEMI','print',5,'p_print','rexparse.py',138),
  ('comment -> COMMENT ID','comment',2,'p_comment','rexparse.py',141),
  ('for -> LPAREN assignment expression SEMI expression RPAREN block','for',7,'p_for','rexparse.py',145),
  ('while -> WHILE LPAREN expression RPAREN gotof block gotowhile updatejump','while',8,'p_while','rexparse.py',149),
  ('gotowhile -> empty','gotowhile',1,'p_gotowhile','rexparse.py',153),
  ('condition -> IF LPAREN expression RPAREN gotof block updatejump ELSE gotoif block updatejump','condition',11,'p_condition','rexparse.py',159),
  ('condition -> IF LPAREN expression RPAREN gotof block updatejump','condition',7,'p_condition','rexparse.py',160),
  ('gotoif -> empty','gotoif',1,'p_gotoif','rexparse.py',165),
  ('gotof -> empty','gotof',1,'p_gotof','rexparse.py',171),
  ('updatejump -> empty','updatejump',1,'p_updatejump','rexparse.py',182),
  ('var -> VAR type var1 SEMI','var',4,'p_var','rexparse.py',187),
  ('var1 -> ID savevar','var1',2,'p_var1','rexparse.py',191),
  ('var1 -> ID savevar COMMA var1','var1',4,'p_var1','rexparse.py',192),
  ('settypeint -> empty','settypeint',1,'p_settypeint','rexparse.py',196),
  ('settypedec -> empty','settypedec',1,'p_settypedec','rexparse.py',201),
  ('settypefrac -> empty','settypefrac',1,'p_settypefrac','rexparse.py',206),
  ('settypestring -> empty','settypestring',1,'p_settypestring','rexparse.py',211),
  ('settypebool -> empty','settypebool',1,'p_settypebool','rexparse.py',216),
  ('savevar -> empty','savevar',1,'p_savevar','rexparse.py',221),
  ('type -> BOOLEAN settypebool','type',2,'p_type','rexparse.py',228),
  ('type -> INTEGER settypeint','type',2,'p_type','rexparse.py',229),
  ('type -> DECIMAL settypedec','type',2,'p_type','rexparse.py',230),
  ('type -> STRING settypestring','type',2,'p_type','rexparse.py',231),
  ('type -> FRACTION settypefrac','type',2,'p_type','rexparse.py',232),
  ('assignment -> type ID EQUALS expression SEMI','assignment',5,'p_assignment','rexparse.py',236),
  ('assignment -> ID EQUALS expression SEMI','assignment',4,'p_assignment','rexparse.py',237),
  ('expression -> exp','expression',1,'p_expression','rexparse.py',241),
  ('exp -> exp OR exp','exp',3,'p_exp','rexparse.py',246),
  ('exp -> exp AND exp','exp',3,'p_exp','rexparse.py',247),
  ('exp -> exp SAME exp','exp',3,'p_exp','rexparse.py',248),
  ('exp -> exp DIF exp','exp',3,'p_exp','rexparse.py',249),
  ('exp -> exp GE exp','exp',3,'p_exp','rexparse.py',250),
  ('exp -> exp LE exp','exp',3,'p_exp','rexparse.py',251),
  ('exp -> exp NE exp','exp',3,'p_exp','rexparse.py',252),
  ('exp -> exp GT exp','exp',3,'p_exp','rexparse.py',253),
  ('exp -> exp LT exp','exp',3,'p_exp','rexparse.py',254),
  ('exp -> exp PLUS exp','exp',3,'p_exp','rexparse.py',255),
  ('exp -> exp MINUS exp','exp',3,'p_exp','rexparse.py',256),
  ('exp -> exp MODULO exp','exp',3,'p_exp','rexparse.py',257),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','rexparse.py',258),
  ('exp -> exp TIMES exp','exp',3,'p_exp','rexparse.py',259),
  ('exp -> exp POWER exp','exp',3,'p_exp','rexparse.py',260),
  ('exp -> ID pushid','exp',2,'p_exp2','rexparse.py',274),
  ('exp -> ID LBRACK expression RBRACK pushid','exp',5,'p_exp2','rexparse.py',275),
  ('exp -> LBRACK exp RBRACK','exp',3,'p_exp2','rexparse.py',276),
  ('exp -> INTEGER_CONS settypeint pushcons','exp',3,'p_exp2','rexparse.py',277),
  ('exp -> STRING_CONS settypestring pushcons','exp',3,'p_exp2','rexparse.py',278),
  ('exp -> FRACTION_CONS settypefrac pushcons','exp',3,'p_exp2','rexparse.py',279),
  ('exp -> DECIMAL_CONS settypedec pushcons','exp',3,'p_exp2','rexparse.py',280),
  ('exp -> TRUE settypebool pushcons','exp',3,'p_exp2','rexparse.py',281),
  ('exp -> FALSE settypebool pushcons','exp',3,'p_exp2','rexparse.py',282),
  ('exp -> EXMARK exp','exp',2,'p_expunary','rexparse.py',286),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_expgroup','rexparse.py',297),
  ('pushtype -> empty','pushtype',1,'p_pushtype','rexparse.py',301),
  ('pushid -> pushtype','pushid',1,'p_pushid','rexparse.py',310),
  ('pushcons -> pushtype','pushcons',1,'p_pushcons','rexparse.py',314),
  ('empty -> <empty>','empty',0,'p_empty','rexparse.py',326),
]

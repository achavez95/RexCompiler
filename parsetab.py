
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightEXMARKleftGTLTGELENESAMEleftPLUSMINUSleftTIMESDIVIDEMODULOleftPOWEREQUALS PLUS MINUS TIMES DIVIDE POWER MODULO LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK NEWLINE COMMA ID SEMI COLON RQUOTE LQUOTE LT LE GT GE NE EXMARK DECIMAL_CONS INTEGER_CONS STRING_CONS FRACTION_CONS DIF COMMENT SAME TRUE PROGRAM VOID OR BOOLEAN DECIMAL IF RETURN ELSE STRING FRACTION AND INTEGER VAR WHILE NOT FUNCTION FALSE FOR PRINT DOprogram : PROGRAM ID SEMI function\n    | PROGRAM ID SEMI var functionfunction : FUNCTION ID LPAREN parameter RPAREN RETURN type block\n    | FUNCTION ID LPAREN RPAREN RETURN type block\n    | FUNCTION ID LPAREN RPAREN block\n    | FUNCTION ID LPAREN parameter RPAREN blockparameter : ID COLON type\n    | ID COLON type COMMA parameterblock : LBRACE statements RBRACE\n    | LBRACE RBRACEstatements : statement\n    | statement statements\n    statement : condition\n    | assignment \n    | while\n    | for\n    | dowhile\n    | comment\n    | print\n    | varprint : PRINT LPAREN expression RPAREN SEMI\n    | PRINT LPAREN STRING_CONS RPAREN SEMI\n    | PRINT LPAREN ID RPAREN SEMIcomment : COMMENT IDfor : LPAREN assignment expression SEMI expression RPAREN blockdowhile : DO pushjump block WHILE LPAREN expression RPAREN gototpushjump : emptygotot : emptywhile : WHILE pushjump LPAREN expression RPAREN gotof block gotowhilegotowhile : emptycondition : IF LPAREN expression RPAREN gotof block ELSE gotoif block updatejump\n    | IF LPAREN expression RPAREN gotof block updatejumpgotoif : emptygotof : emptyupdatejump : emptyvar : VAR type var1 SEMIvar1 : ID pushid savevar allocatevar\n    | ID pushid savevar allocatevar COMMA var1\n    | ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevar COMMA var1\n    | ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevarsettypeint : emptysettypedec : emptysettypefrac : emptysettypestring : emptysettypebool : emptysavevar : emptyallocatevar : emptyupdatesize : emptytype : BOOLEAN settypebool\n    | INTEGER settypeint\n    | DECIMAL settypedec\n    | STRING settypestring\n    | FRACTION settypefracassignment : ID pushid EQUALS expression SEMI updatevarupdatevar : emptyexpression : exp\n    exp : exp OR exp\n    | exp AND exp\n    | exp SAME exp\n    | exp DIF exp\n    | exp GE exp\n    | exp LE exp\n    | exp NE exp\n    | exp GT exp\n    | exp LT exp\n    | exp PLUS exp\n    | exp MINUS exp\n    | exp MODULO exp\n    | exp DIVIDE exp\n    | exp TIMES exp\n    | exp POWER expexp : ID pushdeclaredid\n    | ID LBRACK expression RBRACK pushdeclaredid\n    | LBRACK exp RBRACK\n    | INTEGER_CONS settypeint pushcons\n    | STRING_CONS settypestring pushcons \n    | FRACTION_CONS settypefrac pushcons \n    | DECIMAL_CONS settypedec pushcons \n    | TRUE settypebool pushcons\n    | FALSE settypebool pushconsexp : EXMARK expexp : LPAREN exp RPARENpushtype : emptypushid : pushtypepushdeclaredid : pushtypepushcons : pushtypeempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'POWER':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,113,-87,-87,-87,-87,-87,-87,-87,-87,-87,113,-72,-85,113,-87,-87,-87,-87,113,-86,-79,-80,113,-71,113,113,113,113,113,113,113,113,113,113,113,113,113,-74,-75,-78,-77,-76,-82,-87,-73,]),'RPAREN':([10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,29,31,35,47,87,89,90,92,93,95,96,98,99,101,102,103,105,109,110,111,128,129,131,132,134,135,136,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,167,168,169,170,180,185,188,],[-87,-87,-87,-87,-87,-49,-45,-50,-41,-52,-44,-51,-42,-43,-53,36,-83,40,-7,-8,-87,-87,-56,-87,-87,-87,-87,-87,137,138,139,141,-87,-87,-81,-72,-85,-87,-87,-87,-87,170,178,-86,-79,-80,-59,-71,-70,-66,-67,-60,-57,-58,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,181,-77,-76,-82,-87,193,-73,]),'FRACTION_CONS':([76,77,80,91,94,100,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,174,177,182,183,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-87,98,-55,-54,]),'MINUS':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,116,-87,-87,-87,-87,-87,-87,-87,-87,-87,116,-72,-85,116,-87,-87,-87,-87,116,-86,-79,-80,116,-71,-70,-66,-67,116,116,116,116,116,116,116,116,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'TIMES':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,114,-87,-87,-87,-87,-87,-87,-87,-87,-87,114,-72,-85,114,-87,-87,-87,-87,114,-86,-79,-80,114,-71,-70,114,114,114,114,114,114,114,114,114,114,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'PRINT':([33,43,51,52,53,55,57,58,59,64,65,67,75,79,171,172,173,174,182,183,184,189,190,192,193,194,197,198,199,200,201,202,],[-36,60,60,-17,-19,-15,-14,-16,-13,-10,-20,-18,-9,-24,-23,-21,-22,-87,-55,-54,-87,-25,-32,-35,-87,-87,-26,-28,-29,-30,-87,-31,]),'FALSE':([76,77,80,91,94,100,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,174,177,182,183,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-87,90,-55,-54,]),'DIVIDE':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,126,-87,-87,-87,-87,-87,-87,-87,-87,-87,126,-72,-85,126,-87,-87,-87,-87,126,-86,-79,-80,126,-71,-70,126,126,126,126,126,126,126,126,126,126,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'BOOLEAN':([7,39,41,49,],[10,10,10,10,]),'ELSE':([64,75,184,],[-10,-9,191,]),'FRACTION':([7,39,41,49,],[14,14,14,14,]),'INTEGER_CONS':([44,76,77,80,91,94,100,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,174,177,182,183,],[69,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-87,95,-55,-54,]),'PLUS':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,115,-87,-87,-87,-87,-87,-87,-87,-87,-87,115,-72,-85,115,-87,-87,-87,-87,115,-86,-79,-80,115,-71,-70,-66,-67,115,115,115,115,115,115,115,115,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'COLON':([34,],[39,]),'GT':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,122,-87,-87,-87,-87,-87,-87,-87,-87,-87,122,-72,-85,122,-87,-87,-87,-87,122,-86,-79,-80,-59,-71,-70,-66,-67,122,122,122,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'COMMA':([10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,30,31,32,37,38,45,46,47,108,144,],[-87,-87,-87,-87,-87,-49,-45,-50,-41,-52,-44,-51,-42,-43,-53,-87,-84,-83,-87,-46,-87,70,-47,71,-87,179,]),'VAR':([4,33,43,51,52,53,55,57,58,59,64,65,67,75,79,171,172,173,174,182,183,184,189,190,192,193,194,197,198,199,200,201,202,],[7,-36,7,7,-17,-19,-15,-14,-16,-13,-10,-20,-18,-9,-24,-23,-21,-22,-87,-55,-54,-87,-25,-32,-35,-87,-87,-26,-28,-29,-30,-87,-31,]),'AND':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,119,-87,-87,-87,-87,-87,-87,-87,-87,-87,-81,-72,-85,119,-87,-87,-87,-87,119,-86,-79,-80,-59,-71,-70,-66,-67,119,119,-58,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'FUNCTION':([4,5,33,],[8,8,-36,]),'LBRACE':([10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,36,40,50,66,72,81,82,141,175,176,178,181,186,191,195,196,],[-87,-87,-87,-87,-87,-49,-45,-50,-41,-52,-44,-51,-42,-43,-53,43,43,43,-87,43,43,-27,-87,43,-34,-87,43,43,-87,43,-33,]),'WHILE':([33,43,51,52,53,55,57,58,59,64,65,67,75,79,106,171,172,173,174,182,183,184,189,190,192,193,194,197,198,199,200,201,202,],[-36,68,68,-17,-19,-15,-14,-16,-13,-10,-20,-18,-9,-24,142,-23,-21,-22,-87,-55,-54,-87,-25,-32,-35,-87,-87,-26,-28,-29,-30,-87,-31,]),'SAME':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,112,-87,-87,-87,-87,-87,-87,-87,-87,-87,112,-72,-85,112,-87,-87,-87,-87,112,-86,-79,-80,-59,-71,-70,-66,-67,112,112,112,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'INTEGER':([7,39,41,49,],[11,11,11,11,]),'DO':([33,43,51,52,53,55,57,58,59,64,65,67,75,79,171,172,173,174,182,183,184,189,190,192,193,194,197,198,199,200,201,202,],[-36,66,66,-17,-19,-15,-14,-16,-13,-10,-20,-18,-9,-24,-23,-21,-22,-87,-55,-54,-87,-25,-32,-35,-87,-87,-26,-28,-29,-30,-87,-31,]),'$end':([1,6,9,42,48,64,73,75,88,],[0,-1,-2,-5,-6,-10,-4,-9,-3,]),'TRUE':([76,77,80,91,94,100,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,174,177,182,183,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-87,89,-55,-54,]),'RETURN':([36,40,],[41,49,]),'STRING':([7,39,41,49,],[12,12,12,12,]),'SEMI':([3,18,20,22,24,25,27,28,30,31,32,37,38,45,46,86,89,90,92,93,95,96,97,98,99,108,109,110,111,128,129,131,132,134,135,137,138,139,140,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,187,188,],[4,-45,-41,-44,-42,-43,-87,33,-84,-83,-87,-46,-87,-37,-47,-38,-87,-87,-56,-87,-87,-87,133,-87,-87,-87,-87,-87,-81,-72,-85,-87,-87,-87,-87,171,172,173,174,-40,-86,-79,-80,-59,-71,-70,-66,-67,-60,-57,-58,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,-77,-76,-82,-87,-39,-73,]),'DECIMAL':([7,39,41,49,],[13,13,13,13,]),'NE':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,121,-87,-87,-87,-87,-87,-87,-87,-87,-87,121,-72,-85,121,-87,-87,-87,-87,121,-86,-79,-80,-59,-71,-70,-66,-67,121,121,121,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'EXMARK':([76,77,80,91,94,100,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,174,177,182,183,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-87,91,-55,-54,]),'STRING_CONS':([76,77,80,91,94,100,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,174,177,182,183,],[99,103,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-87,99,-55,-54,]),'LPAREN':([16,33,43,51,52,53,55,57,58,59,60,63,64,65,67,68,75,76,77,79,80,82,83,91,94,100,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,142,171,172,173,174,177,182,183,184,189,190,192,193,194,197,198,199,200,201,202,],[29,-36,56,56,-17,-19,-15,-14,-16,-13,77,80,-10,-20,-18,-87,-9,100,100,-24,100,-27,107,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,177,-23,-21,-22,-87,100,-55,-54,-87,-25,-32,-35,-87,-87,-26,-28,-29,-30,-87,-31,]),'OR':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,118,-87,-87,-87,-87,-87,-87,-87,-87,-87,-81,-72,-85,118,-87,-87,-87,-87,118,-86,-79,-80,-59,-71,-70,-66,-67,118,-57,-58,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'ID':([2,8,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,29,33,43,51,52,53,55,56,57,58,59,62,64,65,67,70,71,75,76,77,79,80,91,94,100,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,171,172,173,174,177,179,182,183,184,189,190,192,193,194,197,198,199,200,201,202,],[3,16,-87,-87,-87,-87,-87,27,-49,-45,-50,-41,-52,-44,-51,-42,-43,-53,34,-36,61,61,-17,-19,-15,61,-14,-16,-13,79,-10,-20,-18,27,34,-9,93,101,-24,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-23,-21,-22,-87,93,27,-55,-54,-87,-25,-32,-35,-87,-87,-26,-28,-29,-30,-87,-31,]),'LBRACK':([27,30,31,32,37,38,76,77,80,91,93,94,100,101,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,174,177,182,183,],[-87,-84,-83,-87,-46,44,94,94,94,94,127,94,94,127,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-87,94,-55,-54,]),'DECIMAL_CONS':([76,77,80,91,94,100,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,174,177,182,183,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-87,96,-55,-54,]),'COMMENT':([33,43,51,52,53,55,57,58,59,64,65,67,75,79,171,172,173,174,182,183,184,189,190,192,193,194,197,198,199,200,201,202,],[-36,62,62,-17,-19,-15,-14,-16,-13,-10,-20,-18,-9,-24,-23,-21,-22,-87,-55,-54,-87,-25,-32,-35,-87,-87,-26,-28,-29,-30,-87,-31,]),'IF':([33,43,51,52,53,55,57,58,59,64,65,67,75,79,171,172,173,174,182,183,184,189,190,192,193,194,197,198,199,200,201,202,],[-36,63,63,-17,-19,-15,-14,-16,-13,-10,-20,-18,-9,-24,-23,-21,-22,-87,-55,-54,-87,-25,-32,-35,-87,-87,-26,-28,-29,-30,-87,-31,]),'DIF':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,117,-87,-87,-87,-87,-87,-87,-87,-87,-87,-81,-72,-85,117,-87,-87,-87,-87,117,-86,-79,-80,-59,-71,-70,-66,-67,117,-57,-58,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'RBRACK':([18,20,22,24,25,31,69,84,85,89,90,92,93,95,96,98,99,109,110,111,128,129,130,131,132,134,135,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,108,-48,-87,-87,-56,-87,-87,-87,-87,-87,-87,-87,-81,-72,-85,164,-87,-87,-87,-87,-86,-79,-80,-59,-71,-70,-66,-67,-60,-57,-58,-61,-63,-64,-62,-65,-68,-69,180,-74,-75,-78,-77,-76,-82,-87,-73,]),'GE':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,120,-87,-87,-87,-87,-87,-87,-87,-87,-87,120,-72,-85,120,-87,-87,-87,-87,120,-86,-79,-80,-59,-71,-70,-66,-67,120,120,120,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'RBRACE':([33,43,51,52,53,54,55,57,58,59,64,65,67,74,75,79,171,172,173,174,182,183,184,189,190,192,193,194,197,198,199,200,201,202,],[-36,64,-11,-17,-19,75,-15,-14,-16,-13,-10,-20,-18,-12,-9,-24,-23,-21,-22,-87,-55,-54,-87,-25,-32,-35,-87,-87,-26,-28,-29,-30,-87,-31,]),'EQUALS':([30,31,61,78,],[-84,-83,-87,104,]),'LE':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,123,-87,-87,-87,-87,-87,-87,-87,-87,-87,123,-72,-85,123,-87,-87,-87,-87,123,-86,-79,-80,-59,-71,-70,-66,-67,123,123,123,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'LT':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,124,-87,-87,-87,-87,-87,-87,-87,-87,-87,124,-72,-85,124,-87,-87,-87,-87,124,-86,-79,-80,-59,-71,-70,-66,-67,124,124,124,-61,-63,-64,-62,-65,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),'MODULO':([18,20,22,24,25,31,89,90,92,93,95,96,98,99,101,103,109,110,111,128,129,130,131,132,134,135,136,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,180,188,],[-45,-41,-44,-42,-43,-83,-87,-87,125,-87,-87,-87,-87,-87,-87,-87,-87,-87,125,-72,-85,125,-87,-87,-87,-87,125,-86,-79,-80,125,-71,-70,125,125,125,125,125,125,125,125,125,125,-68,-69,-74,-75,-78,-77,-76,-82,-87,-73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([43,51,],[51,51,]),'dowhile':([43,51,],[52,52,]),'gotowhile':([194,],[199,]),'print':([43,51,],[53,53,]),'pushjump':([66,68,],[81,83,]),'block':([36,40,50,72,81,175,181,186,195,],[42,48,73,88,106,184,189,194,201,]),'statements':([43,51,],[54,74,]),'type':([7,39,41,49,],[15,47,50,72,]),'empty':([10,11,12,13,14,27,32,38,61,66,68,69,89,90,93,95,96,98,99,101,103,108,109,110,131,132,134,135,141,174,178,180,184,191,193,194,201,],[18,20,22,24,25,31,37,46,31,82,82,85,18,18,31,20,24,25,22,31,22,46,31,31,31,31,31,31,176,182,176,31,192,196,198,200,192,]),'while':([43,51,],[55,55,]),'savevar':([32,],[38,]),'gotoif':([191,],[195,]),'assignment':([43,51,56,],[57,57,76,]),'exp':([76,77,80,91,94,100,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,133,177,],[92,92,92,111,130,136,92,92,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,92,92,92,]),'var1':([15,70,179,],[28,86,187,]),'function':([4,5,],[6,9,]),'for':([43,51,],[58,58,]),'condition':([43,51,],[59,59,]),'pushid':([27,61,],[32,78,]),'settypeint':([11,95,],[19,131,]),'updatevar':([174,],[183,]),'pushtype':([27,61,93,101,109,110,131,132,134,135,180,],[30,30,129,129,145,145,145,145,145,145,129,]),'settypebool':([10,89,90,],[17,109,110,]),'updatejump':([184,201,],[190,202,]),'allocatevar':([38,108,],[45,144,]),'parameter':([29,71,],[35,87,]),'settypefrac':([14,98,],[26,134,]),'program':([0,],[1,]),'expression':([76,77,80,104,107,127,133,177,],[97,102,105,140,143,163,167,185,]),'gotof':([141,178,],[175,186,]),'pushcons':([109,110,131,132,134,135,],[146,147,165,166,168,169,]),'var':([4,43,51,],[5,65,65,]),'gotot':([193,],[197,]),'updatesize':([69,],[84,]),'pushdeclaredid':([93,101,180,],[128,128,188,]),'comment':([43,51,],[67,67,]),'settypedec':([13,96,],[23,132,]),'settypestring':([12,99,103,],[21,135,135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMI function','program',4,'p_program','rexparse.py',173),
  ('program -> PROGRAM ID SEMI var function','program',5,'p_program','rexparse.py',174),
  ('function -> FUNCTION ID LPAREN parameter RPAREN RETURN type block','function',8,'p_function','rexparse.py',178),
  ('function -> FUNCTION ID LPAREN RPAREN RETURN type block','function',7,'p_function','rexparse.py',179),
  ('function -> FUNCTION ID LPAREN RPAREN block','function',5,'p_function','rexparse.py',180),
  ('function -> FUNCTION ID LPAREN parameter RPAREN block','function',6,'p_function','rexparse.py',181),
  ('parameter -> ID COLON type','parameter',3,'p_parameter','rexparse.py',185),
  ('parameter -> ID COLON type COMMA parameter','parameter',5,'p_parameter','rexparse.py',186),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','rexparse.py',190),
  ('block -> LBRACE RBRACE','block',2,'p_block','rexparse.py',191),
  ('statements -> statement','statements',1,'p_statements','rexparse.py',195),
  ('statements -> statement statements','statements',2,'p_statements','rexparse.py',196),
  ('statement -> condition','statement',1,'p_statement','rexparse.py',200),
  ('statement -> assignment','statement',1,'p_statement','rexparse.py',201),
  ('statement -> while','statement',1,'p_statement','rexparse.py',202),
  ('statement -> for','statement',1,'p_statement','rexparse.py',203),
  ('statement -> dowhile','statement',1,'p_statement','rexparse.py',204),
  ('statement -> comment','statement',1,'p_statement','rexparse.py',205),
  ('statement -> print','statement',1,'p_statement','rexparse.py',206),
  ('statement -> var','statement',1,'p_statement','rexparse.py',207),
  ('print -> PRINT LPAREN expression RPAREN SEMI','print',5,'p_print','rexparse.py',211),
  ('print -> PRINT LPAREN STRING_CONS RPAREN SEMI','print',5,'p_print','rexparse.py',212),
  ('print -> PRINT LPAREN ID RPAREN SEMI','print',5,'p_print','rexparse.py',213),
  ('comment -> COMMENT ID','comment',2,'p_comment','rexparse.py',216),
  ('for -> LPAREN assignment expression SEMI expression RPAREN block','for',7,'p_for','rexparse.py',220),
  ('dowhile -> DO pushjump block WHILE LPAREN expression RPAREN gotot','dowhile',8,'p_dowhile','rexparse.py',224),
  ('pushjump -> empty','pushjump',1,'p_pushjump','rexparse.py',228),
  ('gotot -> empty','gotot',1,'p_gotot','rexparse.py',232),
  ('while -> WHILE pushjump LPAREN expression RPAREN gotof block gotowhile','while',8,'p_while','rexparse.py',244),
  ('gotowhile -> empty','gotowhile',1,'p_gotowhile','rexparse.py',248),
  ('condition -> IF LPAREN expression RPAREN gotof block ELSE gotoif block updatejump','condition',10,'p_condition','rexparse.py',256),
  ('condition -> IF LPAREN expression RPAREN gotof block updatejump','condition',7,'p_condition','rexparse.py',257),
  ('gotoif -> empty','gotoif',1,'p_gotoif','rexparse.py',262),
  ('gotof -> empty','gotof',1,'p_gotof','rexparse.py',270),
  ('updatejump -> empty','updatejump',1,'p_updatejump','rexparse.py',281),
  ('var -> VAR type var1 SEMI','var',4,'p_var','rexparse.py',286),
  ('var1 -> ID pushid savevar allocatevar','var1',4,'p_var1','rexparse.py',290),
  ('var1 -> ID pushid savevar allocatevar COMMA var1','var1',6,'p_var1','rexparse.py',291),
  ('var1 -> ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevar COMMA var1','var1',10,'p_var1','rexparse.py',292),
  ('var1 -> ID pushid savevar LBRACK INTEGER_CONS updatesize RBRACK allocatevar','var1',8,'p_var1','rexparse.py',293),
  ('settypeint -> empty','settypeint',1,'p_settypeint','rexparse.py',297),
  ('settypedec -> empty','settypedec',1,'p_settypedec','rexparse.py',302),
  ('settypefrac -> empty','settypefrac',1,'p_settypefrac','rexparse.py',307),
  ('settypestring -> empty','settypestring',1,'p_settypestring','rexparse.py',312),
  ('settypebool -> empty','settypebool',1,'p_settypebool','rexparse.py',317),
  ('savevar -> empty','savevar',1,'p_savevar','rexparse.py',322),
  ('allocatevar -> empty','allocatevar',1,'p_allocatevar','rexparse.py',336),
  ('updatesize -> empty','updatesize',1,'p_updatesize','rexparse.py',341),
  ('type -> BOOLEAN settypebool','type',2,'p_type','rexparse.py',346),
  ('type -> INTEGER settypeint','type',2,'p_type','rexparse.py',347),
  ('type -> DECIMAL settypedec','type',2,'p_type','rexparse.py',348),
  ('type -> STRING settypestring','type',2,'p_type','rexparse.py',349),
  ('type -> FRACTION settypefrac','type',2,'p_type','rexparse.py',350),
  ('assignment -> ID pushid EQUALS expression SEMI updatevar','assignment',6,'p_assignment','rexparse.py',354),
  ('updatevar -> empty','updatevar',1,'p_updatevar','rexparse.py',358),
  ('expression -> exp','expression',1,'p_expression','rexparse.py',374),
  ('exp -> exp OR exp','exp',3,'p_exp','rexparse.py',379),
  ('exp -> exp AND exp','exp',3,'p_exp','rexparse.py',380),
  ('exp -> exp SAME exp','exp',3,'p_exp','rexparse.py',381),
  ('exp -> exp DIF exp','exp',3,'p_exp','rexparse.py',382),
  ('exp -> exp GE exp','exp',3,'p_exp','rexparse.py',383),
  ('exp -> exp LE exp','exp',3,'p_exp','rexparse.py',384),
  ('exp -> exp NE exp','exp',3,'p_exp','rexparse.py',385),
  ('exp -> exp GT exp','exp',3,'p_exp','rexparse.py',386),
  ('exp -> exp LT exp','exp',3,'p_exp','rexparse.py',387),
  ('exp -> exp PLUS exp','exp',3,'p_exp','rexparse.py',388),
  ('exp -> exp MINUS exp','exp',3,'p_exp','rexparse.py',389),
  ('exp -> exp MODULO exp','exp',3,'p_exp','rexparse.py',390),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','rexparse.py',391),
  ('exp -> exp TIMES exp','exp',3,'p_exp','rexparse.py',392),
  ('exp -> exp POWER exp','exp',3,'p_exp','rexparse.py',393),
  ('exp -> ID pushdeclaredid','exp',2,'p_exp2','rexparse.py',408),
  ('exp -> ID LBRACK expression RBRACK pushdeclaredid','exp',5,'p_exp2','rexparse.py',409),
  ('exp -> LBRACK exp RBRACK','exp',3,'p_exp2','rexparse.py',410),
  ('exp -> INTEGER_CONS settypeint pushcons','exp',3,'p_exp2','rexparse.py',411),
  ('exp -> STRING_CONS settypestring pushcons','exp',3,'p_exp2','rexparse.py',412),
  ('exp -> FRACTION_CONS settypefrac pushcons','exp',3,'p_exp2','rexparse.py',413),
  ('exp -> DECIMAL_CONS settypedec pushcons','exp',3,'p_exp2','rexparse.py',414),
  ('exp -> TRUE settypebool pushcons','exp',3,'p_exp2','rexparse.py',415),
  ('exp -> FALSE settypebool pushcons','exp',3,'p_exp2','rexparse.py',416),
  ('exp -> EXMARK exp','exp',2,'p_expunary','rexparse.py',420),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_expgroup','rexparse.py',431),
  ('pushtype -> empty','pushtype',1,'p_pushtype','rexparse.py',435),
  ('pushid -> pushtype','pushid',1,'p_pushid','rexparse.py',447),
  ('pushdeclaredid -> pushtype','pushdeclaredid',1,'p_pushdeclaredid','rexparse.py',451),
  ('pushcons -> pushtype','pushcons',1,'p_pushcons','rexparse.py',460),
  ('empty -> <empty>','empty',0,'p_empty','rexparse.py',472),
]
